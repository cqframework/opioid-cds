<Library xmlns="http://hl7.org/fhir" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhir ../../schema/library.xsd">
    <id value="omtk-data-0.0.1"/>
    <url value="http://fhir.org/guides/cdc/opioid-cds/Library/omtk-data-0.0.1"/>
    <identifier>
        <use value="official"/>
        <value value="OMTKData"/>
    </identifier>
    <version value="0.0.1"/>
    <name value="Library - OMTK Data Logic"/>
    <title value="OMTK Logic"/>
    <status value="active"/>
    <experimental value="true"/>
    <type>
        <coding>
            <system value="http://hl7.org/fhir/library-type"/>
            <code value="logic-library"/>
            <display value="Logic Library"/>
        </coding>
    </type>
    <date value="2017-05-05"/>
    <publisher value="Centers for Disease Control and Prevention (CDC)"/>
    <description value="Opioid Management Terminology Knowledge Base Logic for use in implementing CDC Opioid Prescribing Guidelines."/>
    <purpose value="This library acts as a pure CQL representation of the RxNav database."/>
    <usage value="This library is used to provide information about an opioid prescription necessary to offer opioid management guidance for a patient."/>
    <useContext>
        <code>
            <system value="http://hl7.org/fhir/usage-context-type"/>
            <code value="focus"/>
            <display value="Clinical Focus"/>
        </code>
        <valueCodeableConcept>
            <coding>
                <system value="http://snomed.info/sct"/>
                <code value="182888003"/>
                <display value="Medication requested (situation)"/>
            </coding>
        </valueCodeableConcept>
    </useContext>
    <useContext>
        <code>
            <system value="http://hl7.org/fhir/usage-context-type"/>
            <code value="focus"/>
            <display value="Clinical Focus"/>
        </code>
        <valueCodeableConcept>
            <coding>
                <system value="http://snomed.info/sct"/>
                <code value="82423001"/>
                <display value="Chronic pain (finding)"/>
            </coding>
        </valueCodeableConcept>
    </useContext>
    <jurisdiction>
        <coding>
            <system value="urn:iso:std:iso:3166"/>
            <code value="US"/>
            <display value="United States of America"/>
        </coding>
    </jurisdiction>
    <topic>
        <text value="Opioid Prescribing"/>
    </topic>
    <contributor>
        <type value="author" />
        <name value="Kensaku Kawamoto, MD, PhD, MHS"/>
    </contributor>
    <contributor>
        <type value="author" />
        <name value="Bryn Rhodes"/>
    </contributor>
    <contributor>
        <type value="author" />
        <name value="Floyd Eisenberg, MD, MPH"/>
    </contributor>
    <contributor>
        <type value="author" />
        <name value="Robert McClure, MD, MPH"/>
    </contributor>
    <copyright value="Â© CDC 2016+."/>
    <relatedArtifact>
        <type value="documentation"/>
        <display value="CDC guideline for prescribing opioids for chronic pain"/>
        <url value="https://www.cdc.gov/mmwr/volumes/65/rr/rr6501e1.htm?CDC_AA_refVal=https%3A%2F%2Fwww.cdc.gov%2Fmmwr%2Fvolumes%2F65%2Frr%2Frr6501e1er.htm"/>
    </relatedArtifact>
    <content>
      <contentType value="application/elm+xml"/>
      <data value="<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1">
   <identifier id="OMTKData" version="0.0.1"/>
   <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
   <usings>
      <def localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
   </usings>
   <statements>
      <def name="Months" context="Patient" accessLevel="Public">
         <expression xsi:type="List">
            <element valueType="t:Integer" value="1" xsi:type="Literal"/>
            <element valueType="t:Integer" value="2" xsi:type="Literal"/>
            <element valueType="t:Integer" value="3" xsi:type="Literal"/>
            <element valueType="t:Integer" value="4" xsi:type="Literal"/>
            <element valueType="t:Integer" value="5" xsi:type="Literal"/>
            <element valueType="t:Integer" value="6" xsi:type="Literal"/>
            <element valueType="t:Integer" value="7" xsi:type="Literal"/>
            <element valueType="t:Integer" value="8" xsi:type="Literal"/>
            <element valueType="t:Integer" value="9" xsi:type="Literal"/>
            <element valueType="t:Integer" value="10" xsi:type="Literal"/>
            <element valueType="t:Integer" value="11" xsi:type="Literal"/>
            <element valueType="t:Integer" value="12" xsi:type="Literal"/>
         </expression>
      </def>
      <def name="Days28" context="Patient" accessLevel="Public">
         <expression xsi:type="List">
            <element valueType="t:Integer" value="1" xsi:type="Literal"/>
            <element valueType="t:Integer" value="2" xsi:type="Literal"/>
            <element valueType="t:Integer" value="3" xsi:type="Literal"/>
            <element valueType="t:Integer" value="4" xsi:type="Literal"/>
            <element valueType="t:Integer" value="5" xsi:type="Literal"/>
            <element valueType="t:Integer" value="6" xsi:type="Literal"/>
            <element valueType="t:Integer" value="7" xsi:type="Literal"/>
            <element valueType="t:Integer" value="8" xsi:type="Literal"/>
            <element valueType="t:Integer" value="9" xsi:type="Literal"/>
            <element valueType="t:Integer" value="10" xsi:type="Literal"/>
            <element valueType="t:Integer" value="11" xsi:type="Literal"/>
            <element valueType="t:Integer" value="12" xsi:type="Literal"/>
            <element valueType="t:Integer" value="13" xsi:type="Literal"/>
            <element valueType="t:Integer" value="14" xsi:type="Literal"/>
            <element valueType="t:Integer" value="15" xsi:type="Literal"/>
            <element valueType="t:Integer" value="16" xsi:type="Literal"/>
            <element valueType="t:Integer" value="17" xsi:type="Literal"/>
            <element valueType="t:Integer" value="18" xsi:type="Literal"/>
            <element valueType="t:Integer" value="19" xsi:type="Literal"/>
            <element valueType="t:Integer" value="20" xsi:type="Literal"/>
            <element valueType="t:Integer" value="21" xsi:type="Literal"/>
            <element valueType="t:Integer" value="22" xsi:type="Literal"/>
            <element valueType="t:Integer" value="23" xsi:type="Literal"/>
            <element valueType="t:Integer" value="24" xsi:type="Literal"/>
            <element valueType="t:Integer" value="25" xsi:type="Literal"/>
            <element valueType="t:Integer" value="26" xsi:type="Literal"/>
            <element valueType="t:Integer" value="27" xsi:type="Literal"/>
            <element valueType="t:Integer" value="28" xsi:type="Literal"/>
         </expression>
      </def>
      <def name="Days29" context="Patient" accessLevel="Public">
         <expression xsi:type="List">
            <element valueType="t:Integer" value="1" xsi:type="Literal"/>
            <element valueType="t:Integer" value="2" xsi:type="Literal"/>
            <element valueType="t:Integer" value="3" xsi:type="Literal"/>
            <element valueType="t:Integer" value="4" xsi:type="Literal"/>
            <element valueType="t:Integer" value="5" xsi:type="Literal"/>
            <element valueType="t:Integer" value="6" xsi:type="Literal"/>
            <element valueType="t:Integer" value="7" xsi:type="Literal"/>
            <element valueType="t:Integer" value="8" xsi:type="Literal"/>
            <element valueType="t:Integer" value="9" xsi:type="Literal"/>
            <element valueType="t:Integer" value="10" xsi:type="Literal"/>
            <element valueType="t:Integer" value="11" xsi:type="Literal"/>
            <element valueType="t:Integer" value="12" xsi:type="Literal"/>
            <element valueType="t:Integer" value="13" xsi:type="Literal"/>
            <element valueType="t:Integer" value="14" xsi:type="Literal"/>
            <element valueType="t:Integer" value="15" xsi:type="Literal"/>
            <element valueType="t:Integer" value="16" xsi:type="Literal"/>
            <element valueType="t:Integer" value="17" xsi:type="Literal"/>
            <element valueType="t:Integer" value="18" xsi:type="Literal"/>
            <element valueType="t:Integer" value="19" xsi:type="Literal"/>
            <element valueType="t:Integer" value="20" xsi:type="Literal"/>
            <element valueType="t:Integer" value="21" xsi:type="Literal"/>
            <element valueType="t:Integer" value="22" xsi:type="Literal"/>
            <element valueType="t:Integer" value="23" xsi:type="Literal"/>
            <element valueType="t:Integer" value="24" xsi:type="Literal"/>
            <element valueType="t:Integer" value="25" xsi:type="Literal"/>
            <element valueType="t:Integer" value="26" xsi:type="Literal"/>
            <element valueType="t:Integer" value="27" xsi:type="Literal"/>
            <element valueType="t:Integer" value="28" xsi:type="Literal"/>
            <element valueType="t:Integer" value="29" xsi:type="Literal"/>
         </expression>
      </def>
      <def name="Days30" context="Patient" accessLevel="Public">
         <expression xsi:type="List">
            <element valueType="t:Integer" value="1" xsi:type="Literal"/>
            <element valueType="t:Integer" value="2" xsi:type="Literal"/>
            <element valueType="t:Integer" value="3" xsi:type="Literal"/>
            <element valueType="t:Integer" value="4" xsi:type="Literal"/>
            <element valueType="t:Integer" value="5" xsi:type="Literal"/>
            <element valueType="t:Integer" value="6" xsi:type="Literal"/>
            <element valueType="t:Integer" value="7" xsi:type="Literal"/>
            <element valueType="t:Integer" value="8" xsi:type="Literal"/>
            <element valueType="t:Integer" value="9" xsi:type="Literal"/>
            <element valueType="t:Integer" value="10" xsi:type="Literal"/>
            <element valueType="t:Integer" value="11" xsi:type="Literal"/>
            <element valueType="t:Integer" value="12" xsi:type="Literal"/>
            <element valueType="t:Integer" value="13" xsi:type="Literal"/>
            <element valueType="t:Integer" value="14" xsi:type="Literal"/>
            <element valueType="t:Integer" value="15" xsi:type="Literal"/>
            <element valueType="t:Integer" value="16" xsi:type="Literal"/>
            <element valueType="t:Integer" value="17" xsi:type="Literal"/>
            <element valueType="t:Integer" value="18" xsi:type="Literal"/>
            <element valueType="t:Integer" value="19" xsi:type="Literal"/>
            <element valueType="t:Integer" value="20" xsi:type="Literal"/>
            <element valueType="t:Integer" value="21" xsi:type="Literal"/>
            <element valueType="t:Integer" value="22" xsi:type="Literal"/>
            <element valueType="t:Integer" value="23" xsi:type="Literal"/>
            <element valueType="t:Integer" value="24" xsi:type="Literal"/>
            <element valueType="t:Integer" value="25" xsi:type="Literal"/>
            <element valueType="t:Integer" value="26" xsi:type="Literal"/>
            <element valueType="t:Integer" value="27" xsi:type="Literal"/>
            <element valueType="t:Integer" value="28" xsi:type="Literal"/>
            <element valueType="t:Integer" value="29" xsi:type="Literal"/>
            <element valueType="t:Integer" value="30" xsi:type="Literal"/>
         </expression>
      </def>
      <def name="Days31" context="Patient" accessLevel="Public">
         <expression xsi:type="List">
            <element valueType="t:Integer" value="1" xsi:type="Literal"/>
            <element valueType="t:Integer" value="2" xsi:type="Literal"/>
            <element valueType="t:Integer" value="3" xsi:type="Literal"/>
            <element valueType="t:Integer" value="4" xsi:type="Literal"/>
            <element valueType="t:Integer" value="5" xsi:type="Literal"/>
            <element valueType="t:Integer" value="6" xsi:type="Literal"/>
            <element valueType="t:Integer" value="7" xsi:type="Literal"/>
            <element valueType="t:Integer" value="8" xsi:type="Literal"/>
            <element valueType="t:Integer" value="9" xsi:type="Literal"/>
            <element valueType="t:Integer" value="10" xsi:type="Literal"/>
            <element valueType="t:Integer" value="11" xsi:type="Literal"/>
            <element valueType="t:Integer" value="12" xsi:type="Literal"/>
            <element valueType="t:Integer" value="13" xsi:type="Literal"/>
            <element valueType="t:Integer" value="14" xsi:type="Literal"/>
            <element valueType="t:Integer" value="15" xsi:type="Literal"/>
            <element valueType="t:Integer" value="16" xsi:type="Literal"/>
            <element valueType="t:Integer" value="17" xsi:type="Literal"/>
            <element valueType="t:Integer" value="18" xsi:type="Literal"/>
            <element valueType="t:Integer" value="19" xsi:type="Literal"/>
            <element valueType="t:Integer" value="20" xsi:type="Literal"/>
            <element valueType="t:Integer" value="21" xsi:type="Literal"/>
            <element valueType="t:Integer" value="22" xsi:type="Literal"/>
            <element valueType="t:Integer" value="23" xsi:type="Literal"/>
            <element valueType="t:Integer" value="24" xsi:type="Literal"/>
            <element valueType="t:Integer" value="25" xsi:type="Literal"/>
            <element valueType="t:Integer" value="26" xsi:type="Literal"/>
            <element valueType="t:Integer" value="27" xsi:type="Literal"/>
            <element valueType="t:Integer" value="28" xsi:type="Literal"/>
            <element valueType="t:Integer" value="29" xsi:type="Literal"/>
            <element valueType="t:Integer" value="30" xsi:type="Literal"/>
            <element valueType="t:Integer" value="31" xsi:type="Literal"/>
         </expression>
      </def>
      <def name="IsLeapYear" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <expression xsi:type="Or">
            <operand xsi:type="And">
               <operand xsi:type="Equal">
                  <operand xsi:type="Modulo">
                     <operand name="y" xsi:type="OperandRef"/>
                     <operand valueType="t:Integer" value="4" xsi:type="Literal"/>
                  </operand>
                  <operand valueType="t:Integer" value="0" xsi:type="Literal"/>
               </operand>
               <operand xsi:type="Not">
                  <operand xsi:type="Equal">
                     <operand xsi:type="Modulo">
                        <operand name="y" xsi:type="OperandRef"/>
                        <operand valueType="t:Integer" value="100" xsi:type="Literal"/>
                     </operand>
                     <operand valueType="t:Integer" value="0" xsi:type="Literal"/>
                  </operand>
               </operand>
            </operand>
            <operand xsi:type="Equal">
               <operand xsi:type="Modulo">
                  <operand name="y" xsi:type="OperandRef"/>
                  <operand valueType="t:Integer" value="400" xsi:type="Literal"/>
               </operand>
               <operand valueType="t:Integer" value="0" xsi:type="Literal"/>
            </operand>
         </expression>
         <operand name="y">
            <operandTypeSpecifier name="t:Integer" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="DaysInMonth" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <expression xsi:type="Query">
            <source alias="D">
               <expression xsi:type="Case">
                  <caseItem>
                     <when xsi:type="In">
                        <operand name="m" xsi:type="OperandRef"/>
                        <operand xsi:type="List">
                           <element valueType="t:Integer" value="1" xsi:type="Literal"/>
                           <element valueType="t:Integer" value="3" xsi:type="Literal"/>
                           <element valueType="t:Integer" value="5" xsi:type="Literal"/>
                           <element valueType="t:Integer" value="7" xsi:type="Literal"/>
                           <element valueType="t:Integer" value="8" xsi:type="Literal"/>
                           <element valueType="t:Integer" value="10" xsi:type="Literal"/>
                           <element valueType="t:Integer" value="12" xsi:type="Literal"/>
                        </operand>
                     </when>
                     <then name="Days31" xsi:type="ExpressionRef"/>
                  </caseItem>
                  <caseItem>
                     <when xsi:type="Equal">
                        <operand name="m" xsi:type="OperandRef"/>
                        <operand valueType="t:Integer" value="2" xsi:type="Literal"/>
                     </when>
                     <then xsi:type="If">
                        <condition asType="t:Boolean" xsi:type="As">
                           <operand name="IsLeapYear" xsi:type="FunctionRef">
                              <operand name="y" xsi:type="OperandRef"/>
                           </operand>
                        </condition>
                        <then name="Days29" xsi:type="ExpressionRef"/>
                        <else name="Days28" xsi:type="ExpressionRef"/>
                     </then>
                  </caseItem>
                  <else name="Days30" xsi:type="ExpressionRef"/>
               </expression>
            </source>
            <return>
               <expression xsi:type="DateTime">
                  <year name="y" xsi:type="OperandRef"/>
                  <month name="m" xsi:type="OperandRef"/>
                  <day name="D" xsi:type="AliasRef"/>
               </expression>
            </return>
         </expression>
         <operand name="y">
            <operandTypeSpecifier name="t:Integer" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand name="m">
            <operandTypeSpecifier name="t:Integer" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="DaysInYear" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <expression xsi:type="Flatten">
            <operand xsi:type="Query">
               <source alias="M">
                  <expression name="Months" xsi:type="ExpressionRef"/>
               </source>
               <return>
                  <expression name="DaysInMonth" xsi:type="FunctionRef">
                     <operand name="y" xsi:type="OperandRef"/>
                     <operand name="M" xsi:type="AliasRef"/>
                  </expression>
               </return>
            </operand>
         </expression>
         <operand name="y">
            <operandTypeSpecifier name="t:Integer" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="DaysInPeriod" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <expression xsi:type="Case">
            <caseItem>
               <when xsi:type="Or">
                  <operand xsi:type="IsNull">
                     <operand xsi:type="Start">
                        <operand name="period" xsi:type="OperandRef"/>
                     </operand>
                  </operand>
                  <operand xsi:type="IsNull">
                     <operand xsi:type="End">
                        <operand name="period" xsi:type="OperandRef"/>
                     </operand>
                  </operand>
               </when>
               <then xsi:type="As">
                  <operand xsi:type="Null"/>
                  <asTypeSpecifier xsi:type="ListTypeSpecifier">
                     <elementType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                  </asTypeSpecifier>
               </then>
            </caseItem>
            <caseItem>
               <when precision="Year" xsi:type="SameAs">
                  <operand xsi:type="Start">
                     <operand name="period" xsi:type="OperandRef"/>
                  </operand>
                  <operand xsi:type="End">
                     <operand name="period" xsi:type="OperandRef"/>
                  </operand>
               </when>
               <then xsi:type="Case">
                  <caseItem>
                     <when xsi:type="Equal">
                        <operand precision="Month" xsi:type="DateTimeComponentFrom">
                           <operand xsi:type="Start">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand precision="Month" xsi:type="DateTimeComponentFrom">
                           <operand xsi:type="End">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                     </when>
                     <then xsi:type="Query">
                        <source alias="D">
                           <expression name="DaysInMonth" xsi:type="FunctionRef">
                              <operand precision="Year" xsi:type="DateTimeComponentFrom">
                                 <operand xsi:type="Start">
                                    <operand name="period" xsi:type="OperandRef"/>
                                 </operand>
                              </operand>
                              <operand precision="Month" xsi:type="DateTimeComponentFrom">
                                 <operand xsi:type="Start">
                                    <operand name="period" xsi:type="OperandRef"/>
                                 </operand>
                              </operand>
                           </expression>
                        </source>
                        <where xsi:type="And">
                           <operand precision="Day" xsi:type="SameOrAfter">
                              <operand name="D" xsi:type="AliasRef"/>
                              <operand xsi:type="Start">
                                 <operand name="period" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                           <operand precision="Day" xsi:type="SameOrBefore">
                              <operand name="D" xsi:type="AliasRef"/>
                              <operand xsi:type="End">
                                 <operand name="period" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                        </where>
                     </then>
                  </caseItem>
                  <else xsi:type="Query">
                     <source alias="D">
                        <expression name="DaysInYear" xsi:type="FunctionRef">
                           <operand precision="Year" xsi:type="DateTimeComponentFrom">
                              <operand xsi:type="Start">
                                 <operand name="period" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand precision="Day" xsi:type="SameOrAfter">
                           <operand name="D" xsi:type="AliasRef"/>
                           <operand xsi:type="Start">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand precision="Day" xsi:type="SameOrBefore">
                           <operand name="D" xsi:type="AliasRef"/>
                           <operand xsi:type="End">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                     </where>
                  </else>
               </then>
            </caseItem>
            <caseItem>
               <when xsi:type="Equal">
                  <operand precision="Year" xsi:type="DifferenceBetween">
                     <operand xsi:type="Start">
                        <operand name="period" xsi:type="OperandRef"/>
                     </operand>
                     <operand xsi:type="End">
                        <operand name="period" xsi:type="OperandRef"/>
                     </operand>
                  </operand>
                  <operand valueType="t:Integer" value="1" xsi:type="Literal"/>
               </when>
               <then xsi:type="Union">
                  <operand xsi:type="Query">
                     <source alias="D">
                        <expression name="DaysInYear" xsi:type="FunctionRef">
                           <operand precision="Year" xsi:type="DateTimeComponentFrom">
                              <operand xsi:type="Start">
                                 <operand name="period" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand precision="Day" xsi:type="SameOrAfter">
                           <operand name="D" xsi:type="AliasRef"/>
                           <operand xsi:type="Start">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand precision="Day" xsi:type="SameOrBefore">
                           <operand name="D" xsi:type="AliasRef"/>
                           <operand xsi:type="End">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                     </where>
                  </operand>
                  <operand xsi:type="Query">
                     <source alias="D">
                        <expression name="DaysInYear" xsi:type="FunctionRef">
                           <operand precision="Year" xsi:type="DateTimeComponentFrom">
                              <operand xsi:type="End">
                                 <operand name="period" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand precision="Day" xsi:type="SameOrAfter">
                           <operand name="D" xsi:type="AliasRef"/>
                           <operand xsi:type="Start">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand precision="Day" xsi:type="SameOrBefore">
                           <operand name="D" xsi:type="AliasRef"/>
                           <operand xsi:type="End">
                              <operand name="period" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                     </where>
                  </operand>
               </then>
            </caseItem>
            <else xsi:type="As">
               <operand xsi:type="Null"/>
               <asTypeSpecifier xsi:type="ListTypeSpecifier">
                  <elementType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
               </asTypeSpecifier>
            </else>
         </expression>
         <operand name="period">
            <operandTypeSpecifier xsi:type="IntervalTypeSpecifier">
               <pointType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def name="DrugIngredients" context="Patient" accessLevel="Public">
         <expression xsi:type="List">
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="197696" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.075 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.075 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.075" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="197873" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Levorphanol 2 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6378" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Levorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="198402" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 1.5 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="198403" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 2.5 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="199400" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine 50 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="199789" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Pentazocine 50 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="205533" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Buprenorphine 0.3 MG/ML Injection [Buprenex]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="211354" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Pentazocine 25 MG Oral Tablet [Talacen]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="238129" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Buprenorphine 0.3 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="238133" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Pentazocine 30 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="245134" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.025 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.025 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.025" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="245135" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.05 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="245136" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.1 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="246474" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.2 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="250426" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.4 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="250485" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Pentazocine 25 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="250486" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Pentazocine 50 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="250877" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Pentazocine 50 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261106" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG Oral Lozenge [Actiq]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261107" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG Oral Lozenge [Actiq]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261108" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG Oral Lozenge [Actiq]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261109" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 1.2 MG Oral Lozenge [Actiq]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261110" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 1.6 MG Oral Lozenge [Actiq]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261184" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.025 MG/HR Transdermal System [Duragesic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.025 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.025" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261185" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.05 MG/HR Transdermal System [Duragesic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="261186" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.075 MG/HR Transdermal System [Duragesic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.075 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.075" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="262071" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.1 MG/HR Transdermal System [Duragesic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="262219" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG Oral Lozenge [Actiq]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="310293" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 1.2 MG Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="310294" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 1.6 MG Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="310295" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="310296" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.3 MG Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="310297" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="311297" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Levomethadyl 10 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="237005" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Levomethadyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="311300" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Levorphanol 2 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6378" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Levorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="312288" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Pentazocine 25 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="312289" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Naloxone 0.5 MG / Pentazocine 50 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="313992" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="313993" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316992" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Lozenge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="351264" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="351265" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 8 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="351266" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2 MG / Naloxone 0.5 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="351267" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 8 MG / Naloxone 2 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="388506" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Buprenorphine 0.07 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.07 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.07" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="388507" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Buprenorphine 0.0525 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.0525 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.0525" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="388508" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Buprenorphine 0.035 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.035 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.035" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="577057" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.012 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.012 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.012" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="583490" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.012 MG/HR Transdermal System [Duragesic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.012 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.012" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="637540" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 4.5 MG / oxycodone terephthalate 0.38 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="637540" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 4.5 MG / oxycodone terephthalate 0.38 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.38 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.38" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668363" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668364" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668365" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668366" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668367" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668622" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG Buccal Tablet [Fentora]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668624" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG Buccal Tablet [Fentora]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668626" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG Buccal Tablet [Fentora]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668628" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG Buccal Tablet [Fentora]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="668630" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG Buccal Tablet [Fentora]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="706898" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.3 MG Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="970789" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="724614" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 2.25 MG / oxycodone terephthalate 0.19 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.19 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.19" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="724614" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 2.25 MG / oxycodone terephthalate 0.19 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.25 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.25" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="727759" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Fentanyl 0.05 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="825409" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 100 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="825411" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 50 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="825413" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 75 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="827748" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="propoxyphene napsylate 100 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="827750" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="propoxyphene napsylate 100 MG Oral Tablet [Darvon-N]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="827751" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / propoxyphene napsylate 100 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="828576" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / propoxyphene napsylate 100 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="828581" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Propoxyphene Hydrochloride 65 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="65 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="65.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="828585" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 389 MG / Caffeine 32.4 MG / Propoxyphene Hydrochloride 32 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="32 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="32.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="828594" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 389 MG / Caffeine 32.4 MG / Propoxyphene Hydrochloride 65 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="65 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="65.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="833036" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 750 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="833709" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="833710" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Matrix Delivery 24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet [Ryzolt]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="833711" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="833712" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Matrix Delivery 24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet [Ryzolt]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="833713" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="300 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="300.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="833714" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Matrix Delivery 24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet [Ryzolt]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="300 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="300.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="835603" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 50 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="835605" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 50 MG Oral Tablet [Ultram]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="836395" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / tramadol hydrochloride 37.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="37.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="37.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="836397" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / tramadol hydrochloride 37.5 MG Oral Tablet [Ultracet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="37.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="37.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="836408" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 50 MG Disintegrating Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316942" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Disintegrating Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="836466" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 50 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="836485" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="845314" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet [Ultram]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="845315" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet [Ultram]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="845316" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet [Ultram]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="300 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="300.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="848768" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4.84 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.84" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="848772" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet [Percodan Reformulated May 2009]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4.84 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.84" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="848928" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet [Endodan Reformulated May 2009]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4.84 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.84" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849279" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Propoxyphene Hydrochloride 65 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="65 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="65.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849293" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Propoxyphene Hydrochloride 32.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="32.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="32.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849295" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / propoxyphene napsylate 50 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849303" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / propoxyphene napsylate 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849304" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / propoxyphene napsylate 100 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849306" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 65 MG/ML / Propoxyphene Hydrochloride 6.5 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849329" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 50 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849331" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 75 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849455" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Propoxyphene Hydrochloride 100 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8785" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Propoxyphene" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849563" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 150 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="150 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="150.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849564" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 400 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="400 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="400.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="849903" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tramadol hydrochloride 50 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="854140" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 100 MG Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="854142" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 50 MG Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="854144" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 75 MG Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856892" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 750 MG / Hydrocodone Bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856894" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 750 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Maxidone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856903" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856907" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Vicodin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856908" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 660 MG / Hydrocodone Bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856940" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856942" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Hycet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856944" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.67 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.67 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.67" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856946" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.67 MG/ML Oral Solution [Zamicet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.67 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.67" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856962" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856980" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856984" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Xodol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856987" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856991" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Xodol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856992" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856996" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Xodol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="856999" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857001" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Norco]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857002" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857004" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Norco]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857005" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857007" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Norco]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857076" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.333 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.333 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.333" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857083" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857099" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857105" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Lortab]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857107" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857111" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857113" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet [Lortab]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857118" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857120" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lortab]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857121" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857128" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 400 MG / Hydrocodone Bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857131" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 400 MG / Hydrocodone Bitartrate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857134" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 400 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857136" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 400 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Zydone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857237" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Pentazocine 30 MG/ML Injectable Solution [Talwin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857370" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Hy-Phen]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857383" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Hydrocodone Bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857391" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857501" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 556 MG / Hydrocodone Bitartrate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857510" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 4 MG / HYDROCODONE POLISTIREX 5 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857512" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 8 MG / HYDROCODONE POLISTIREX 10 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857556" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.34 MG/ML / Pseudoephedrine 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.34 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.34" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857575" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.34 MG/ML / Pseudoephedrine 6 MG/ML Oral Solution [Bromplex HD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.34 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.34" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857734" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.334 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.334" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857830" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Triant-HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.334 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.334" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857839" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857845" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Hydro-PC II]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="857851" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858087" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 1.2 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858092" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858095" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858098" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858101" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858770" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 2.5 MG / Ibuprofen 200 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858772" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 2.5 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858778" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858780" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet [Ibudone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858784" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858798" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 7.5 MG / Ibuprofen 200 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858838" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 7.5 MG / Ibuprofen 200 MG Oral Tablet [Vicoprofen]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858876" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858878" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [De-Chlor HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858937" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Hyphed]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858939" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 24 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858945" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 24 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Hydron EX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858953" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 30 MG/ML / Hydrocodone Bitartrate 0.6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858967" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.9 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.9" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858969" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution [Hy-KXP]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.9 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.9" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858976" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution [Prolex DH]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.9 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.9" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="858991" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859003" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859005" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [S-T Forte 2]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859019" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Hydron KGS]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859027" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.7 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859029" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Hydro-PC II]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.7 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859097" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 70 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859099" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 70 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [KGS HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859137" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859141" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution [B-Tuss]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859143" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Drotuss CP]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859146" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859150" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Hydron CP]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859156" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859162" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859164" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Poly-Tussin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859220" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine 1.6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.65 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.65" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859222" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine 1.6 MG/ML Oral Solution [Relasin HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.65 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.65" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859247" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316946" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859315" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859317" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Ibudone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859327" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 30 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859329" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 30 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.2 MG/ML Oral Solution [Hydrofed]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859331" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859366" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859368" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Nariz HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859376" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Nazarin HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859383" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859939" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859941" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Exetuss HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="859943" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Simuc-HD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860138" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="guaiacolsulfonate 30 MG/ML / Hydrocodone Bitartrate 0.6 MG/ML Oral Solution [De-Chlor NX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860151" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860159" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 1 MG/ML Oral Solution [De-Chlor MR]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860239" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [Hydro GP]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860426" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860446" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Drituss HD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860530" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Su-Tuss HD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860579" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.75 MG/ML / Pseudoephedrine 4.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.75 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.75" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860593" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.334 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.334" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860599" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="860792" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 75 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861447" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 10 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861455" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 100 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861459" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 100 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861463" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 50 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861467" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 50 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861473" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 50 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861476" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 25 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861479" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 10 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861482" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 75 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861493" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 100 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861494" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 25 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861517" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 100 MG Oral Tablet [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861520" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 100 MG/ML Injectable Solution [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861522" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 50 MG/ML Injectable Solution [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861525" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 50 MG Oral Tablet [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861529" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 50 MG/ML Cartridge [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861578" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 50 MG / Promethazine Hydrochloride 25 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="861617" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 75 MG/ML Cartridge [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863845" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 100 MG / Naltrexone hydrochloride 4 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863847" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 100 MG / Naltrexone hydrochloride 4 MG Extended Release Oral Capsule [Embeda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863848" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 20 MG / Naltrexone hydrochloride 0.8 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863849" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 20 MG / Naltrexone hydrochloride 0.8 MG Extended Release Oral Capsule [Embeda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863850" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 30 MG / Naltrexone hydrochloride 1.2 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863851" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 30 MG / Naltrexone hydrochloride 1.2 MG Extended Release Oral Capsule [Embeda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863852" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 50 MG / Naltrexone hydrochloride 2 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863853" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 50 MG / Naltrexone hydrochloride 2 MG Extended Release Oral Capsule [Embeda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863854" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 60 MG / Naltrexone hydrochloride 2.4 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863855" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 60 MG / Naltrexone hydrochloride 2.4 MG Extended Release Oral Capsule [Embeda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863856" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 80 MG / Naltrexone hydrochloride 3.2 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="863857" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Morphine Sulfate 80 MG / Naltrexone hydrochloride 3.2 MG Extended Release Oral Capsule [Embeda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864706" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864708" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 10 MG Oral Tablet [Dolophine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864712" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 10 MG Oral Tablet [Methadose]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864714" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 10 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864718" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864720" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 5 MG Oral Tablet [Dolophine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864737" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 5 MG Oral Tablet [Methadose]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864751" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 0.4 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864761" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864769" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864794" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 25 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864828" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 50 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864978" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 40 MG Tablet for Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1861409" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Tablet for Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864980" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 40 MG Tablet for Oral Suspension [Methadose]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1861409" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Tablet for Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="864984" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 20 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="886622" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol Tartrate 2 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="886627" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Butorphanol Tartrate 1 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="886634" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol Tartrate 10 MG/ML Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="126542" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891172" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 2 MG/ML Oral Solution [De-Chlor G]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891874" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891878" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891881" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 15 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891883" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891885" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891888" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891890" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="891893" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 60 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892297" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 120 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="120 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="120.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892299" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 120 MG Extended Release Oral Capsule [Avinza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="120 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="120.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892342" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 30 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892344" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 30 MG Extended Release Oral Capsule [Avinza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892345" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892349" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 60 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892351" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 60 MG Extended Release Oral Capsule [Avinza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892352" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 60 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892355" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 90 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="90 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="90.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892357" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 90 MG Extended Release Oral Capsule [Avinza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="90 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="90.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892473" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Morphine Sulfate 0.5 MG/ML Injection [Duramorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892489" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Morphine Sulfate 1 MG/ML Injection [Duramorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892494" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 10 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892496" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 10 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892516" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 10 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892531" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 10 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892554" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 100 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892556" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 100 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892560" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 100 MG Extended Release Oral Tablet [MS Contin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892574" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 15 MG Extended Release Oral Tablet [MS Contin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892579" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 15 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892582" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 15 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892589" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892596" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 20 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892598" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 20 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892603" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 20 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892625" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 20 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892643" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 200 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892645" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 200 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892646" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 200 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892648" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 200 MG Extended Release Oral Tablet [MS Contin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892652" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="20 ML Morphine Sulfate 25 MG/ML Injection [Infumorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892658" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892660" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG Extended Release Oral Tablet [MS Contin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892669" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892672" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="892678" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894780" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 4 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894801" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 50 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894803" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 50 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894805" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 60 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894807" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 5 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894813" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 60 MG Extended Release Oral Tablet [MS Contin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894814" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 80 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894816" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 80 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894911" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="0.7 ML Morphine Sulfate 14.3 MG/ML Auto-Injector" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649570" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Auto-Injector" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="14.3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="14.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894912" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 10 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894914" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 8 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894918" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Morphine Sulfate 200 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894933" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 150 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="150 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="150.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894942" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 45 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="45 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="45.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894970" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 75 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="894986" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 0.4 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895014" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895016" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 10 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895022" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 100 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895185" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 15 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895194" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 15 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895199" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 2 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895201" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 20 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895202" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 20 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895206" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 200 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895208" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 3 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="3.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895213" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 30 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895215" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 35 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="35 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="35.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895217" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 5 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895219" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 5 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895221" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 50 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895227" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 50 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895233" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 6 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895238" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895240" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 6.67 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6.67 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.67" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895247" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895248" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 75 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895861" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 25 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895867" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine hydrochloride 40 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895869" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="895871" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 50 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897653" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 1 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897655" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 1 MG/ML Injection [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897657" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897658" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 1 MG/ML Oral Solution [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897677" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897687" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897696" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 2 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897698" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 2 MG Oral Tablet [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897702" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 4 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897704" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 4 MG Oral Tablet [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897710" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 8 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897712" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 8 MG Oral Tablet [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897730" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 24 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="24 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="24.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897737" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="32 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="32.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897745" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 2 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897747" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 2 MG/ML Injection [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897749" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 3 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="3.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897753" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 4 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897755" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 4 MG/ML Injection [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897756" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897757" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 2 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897758" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 4 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="897771" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 1 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="898004" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 1.3 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="898138" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 2.6 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="898139" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 3 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="3.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="898612" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydromorphone Hydrochloride 3 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="3.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="898624" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 30 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="899125" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 2.4 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="902729" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="902733" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Tablet [Exalgo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="902736" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="902738" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Tablet [Exalgo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="902741" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 8 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="902743" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 8 MG Extended Release Oral Tablet [Exalgo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="904870" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.01 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.01 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.01" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="904874" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.01 MG/HR Transdermal System [BuTrans]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.01 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.01" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="904876" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.02 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.02 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.02" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="904878" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.02 MG/HR Transdermal System [BuTrans]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.02 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.02" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="904880" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.005 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.005 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.005" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="904882" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.005 MG/HR Transdermal System [BuTrans]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.005 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.005" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977874" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 10 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977876" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 10 MG Extended Release Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977894" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 15 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977896" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 15 MG Extended Release Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977902" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 20 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977904" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 20 MG Extended Release Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977909" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 30 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977911" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 30 MG Extended Release Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977915" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 40 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977917" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 40 MG Extended Release Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977923" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 5 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977925" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 5 MG Extended Release Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977929" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 7.5 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977931" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxymorphone Hydrochloride 7.5 MG Extended Release Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977935" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Oxymorphone Hydrochloride 1 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977937" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Oxymorphone Hydrochloride 1 MG/ML Injection [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977939" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxymorphone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977940" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxymorphone Hydrochloride 5 MG Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977942" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxymorphone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977943" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxymorphone Hydrochloride 10 MG Oral Tablet [Opana]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977971" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxymorphone Hydrochloride 1.5 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="977974" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxymorphone Hydrochloride 5 MG Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316978" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Rectal Suppository" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7814" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxymorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="991147" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 10 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="991149" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Methadone Hydrochloride 10 MG/ML Oral Solution [Methadose]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6813" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Methadone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="991486" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Promethazine Hydrochloride 1.25 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="992656" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="homatropine methylbromide 1.5 MG / Hydrocodone Bitartrate 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="992668" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="homatropine methylbromide 0.3 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="992675" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="homatropine methylbromide 0.3 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Hydromet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="992733" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="homatropine methylbromide 1.5 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Tussigon]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993755" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993763" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993767" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Suspension [Capital and Codeine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993770" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Codeine Phosphate 15 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993781" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Codeine Phosphate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993837" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Codeine Phosphate 30 MG Oral Tablet [Tylenol with Codeine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993890" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Codeine Phosphate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993892" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Codeine Phosphate 60 MG Oral Tablet [Tylenol with Codeine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993924" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Chlorpheniramine 2 MG / Codeine Phosphate 16 MG / Phenylephrine 10 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993926" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Chlorpheniramine 2 MG / Codeine Phosphate 16 MG / Phenylephrine 10 MG Oral Capsule [Colrex]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="993943" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994043" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 15 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994045" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 15 MG Oral Tablet [Codrix]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994046" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994048" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Tablet [Codrix]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994049" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994051" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 60 MG Oral Tablet [Codrix]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994226" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Carisoprodol 200 MG / Codeine Phosphate 16 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994228" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Carisoprodol 200 MG / Codeine Phosphate 16 MG Oral Tablet [Soma Compound with Codeine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994237" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994239" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Ascomp]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994277" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Fiorinal with Codeine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994289" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.27 MG/ML / Codeine Phosphate 1.27 MG/ML / Pseudoephedrine Hydrochloride 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.27 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.27" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994402" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="994404" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Mar-cof BP]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995041" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995043" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3 MG/ML Oral Suspension [Zodryl DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995062" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995064" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995065" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3.33 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995067" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3.33 MG/ML Oral Suspension [Zodryl DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995068" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995070" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995071" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995073" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995075" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 0.375 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995077" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 0.375 MG/ML Oral Suspension [Zodryl DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995079" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.266 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995081" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.266 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4 MG/ML Oral Suspension [Zodryl DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995082" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.267 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995084" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.267 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995086" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4.29 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995088" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4.29 MG/ML Oral Suspension [Zodryl DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995093" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995095" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995108" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 5 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995110" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 5 MG/ML Oral Suspension [Zodryl DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995116" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995118" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995120" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 6 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995122" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 6 MG/ML Oral Suspension [Zodryl DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995123" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995125" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995128" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1.8 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995132" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1.8 MG/ML Oral Solution [Z Tuss AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995211" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 4 MG / Codeine Phosphate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995213" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 4 MG / Codeine Phosphate 10 MG Oral Tablet [Cotab A]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995214" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 4 MG / Codeine Phosphate 20 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995216" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine 4 MG / Codeine Phosphate 20 MG Oral Tablet [Cotab AX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995226" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 0.5 MG/ML / Guaifenesin 15 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995438" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.26 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.26" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995440" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution [M-Clear WC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.26 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.26" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995441" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.5 MG/ML / Guaifenesin 45 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995443" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.5 MG/ML / Guaifenesin 45 MG/ML Oral Solution [Mar-cof CG]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995447" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.8 MG/ML / Pyrilamine Maleate 1.67 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995450" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 300 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995453" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Phenylephrine 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995455" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Phenylephrine 10 MG Oral Tablet [Maxiphen CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995476" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995478" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG Oral Tablet [Allfen CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995483" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 40 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995868" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995872" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Cheratussin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995936" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 300 MG Oral Tablet [Brontex]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995940" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 0.5 MG/ML / Guaifenesin 15 MG/ML Oral Solution [Brontex]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995956" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Cheracol with Codeine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995983" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995985" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Biotussin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="995993" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Cheratussin DAC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996253" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Nucofed Expectorant]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996263" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Phenylhistine Expectorant]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996462" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Guiatuss AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996481" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Mytussin AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996484" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Robafen AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996512" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 60 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996580" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996584" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1 MG/ML Oral Solution [Zotex C]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996621" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996623" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [Ala-Hist AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996627" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996629" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution [Notuss PE]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996636" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Pyrilamine Maleate 3 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996640" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996648" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Pseudodine C]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996650" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Triacin C]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996706" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996708" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Maxiphen CDX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996710" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996712" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet [Ambifed-G CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996714" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996716" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet [Ambifed CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996718" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996720" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet [Maxifed-G CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996722" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996724" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [Maxifed CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996725" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996727" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Guaifenesin 400 MG Oral Tablet [Allfen CDX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996728" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996730" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG Oral Capsule [Nucofed]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996734" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996736" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 9 MG / Guaifenesin 200 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="9.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996738" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 9 MG / Guaifenesin 200 MG Oral Capsule [M-Clear WC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="9.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996757" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Promethazine Hydrochloride 1.25 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996976" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 12.8 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996978" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 13.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="13.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="13.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996979" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996981" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 8 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996982" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 8 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996983" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Codeine Phosphate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996988" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 300 MG / Codeine Phosphate 8 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996991" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Codeine Phosphate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996994" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Codeine Phosphate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="996998" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.266 MG/ML / Codeine Phosphate 1.27 MG/ML / Phenylephrine Hydrochloride 0.666 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.27 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.27" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997008" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997014" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 0.6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997019" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Kaolin 300 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997160" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1.67 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997164" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 12.5 MG / Ibuprofen 200 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997165" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 12.8 MG / Ibuprofen 200 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997169" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 15 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997170" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine sulfate 15 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997175" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997272" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997280" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Ibuprofen 300 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997284" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 3 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="3.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997285" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997287" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine sulfate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997289" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 30 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997296" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine sulfate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997301" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997303" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 60 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="997398" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="998212" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 2 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="998213" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 4 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="999729" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 250 MG / tramadol hydrochloride 50 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1010600" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2 MG / Naloxone 0.5 MG Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1010603" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2 MG / Naloxone 0.5 MG Oral Strip [Suboxone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1010604" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 8 MG / Naloxone 2 MG Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1010606" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 8 MG / Naloxone 2 MG Oral Strip [Suboxone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1010608" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2 MG / Naloxone 0.5 MG Sublingual Tablet [Suboxone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1010609" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 8 MG / Naloxone 2 MG Sublingual Tablet [Suboxone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1014599" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Oxycodone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1014615" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1014632" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1037259" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1042693" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1043650" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Poly Hist NC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1044427" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 20 MG/ML / Hydrocodone Bitartrate 0.667 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.667 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.667" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049214" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049216" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Endocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049221" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049223" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Endocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049225" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049227" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Endocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049233" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049251" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 400 MG / Oxycodone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049260" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 400 MG / Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049267" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 400 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049270" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Oxycodone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049502" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049504" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet [Oxycontin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049543" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049545" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet [Oxycontin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049557" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 160 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="160 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="160.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049563" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049565" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet [Oxycontin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049574" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049576" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet [Oxycontin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049580" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 65 MG/ML / Oxycodone Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049582" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 65 MG/ML / Oxycodone Hydrochloride 1 MG/ML Oral Solution [Roxicet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049584" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049586" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet [Oxycontin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049589" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Ibuprofen 400 MG / Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049593" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049595" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet [Oxycontin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049599" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049601" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet [Oxycontin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049604" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049611" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 15 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049613" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 15 MG Oral Tablet [Roxicodone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049615" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 20 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049618" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049620" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 30 MG Oral Tablet [Roxicodone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049621" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049623" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 5 MG Oral Tablet [Roxicodone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049625" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Percocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049635" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049637" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet [Percocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049640" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Percocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049642" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Percocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049647" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Percocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049650" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 650 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Percocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049651" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Oxycodone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049655" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Xolox]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049658" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Oxycodone Hydrochloride 5 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049683" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049686" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 20 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049691" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049696" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 5 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049709" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049717" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 10 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049719" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 10 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049720" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 10 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049721" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 20 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1049727" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 5 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1050409" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 20 MG/ML Oral Solution [Oxyfast]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1050490" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Roxicet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053647" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053651" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG Sublingual Tablet [Abstral]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053652" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053654" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG Sublingual Tablet [Abstral]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053655" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.3 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053657" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.3 MG Sublingual Tablet [Abstral]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053658" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053660" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG Sublingual Tablet [Abstral]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053661" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053663" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG Sublingual Tablet [Abstral]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053664" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1053666" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG Sublingual Tablet [Abstral]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1086310" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 75 MG Extended Release Oral Capsule [Avinza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1086926" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Relcof C]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.26 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.26" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1087389" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 4 MG / HYDROCODONE POLISTIREX 5 MG Extended Release Oral Capsule [TussiCaps]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1087427" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 8 MG / HYDROCODONE POLISTIREX 10 MG Extended Release Oral Capsule [TussiCaps]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1087459" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 1.6 MG/ML / HYDROCODONE POLISTIREX 2 MG/ML Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316946" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1087463" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 1.6 MG/ML / HYDROCODONE POLISTIREX 2 MG/ML Extended Release Suspension [Tussionex]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316946" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088951" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088953" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML Oral Suspension [Zodryl DEC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088963" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.33 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088965" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.33 MG/ML Oral Suspension [Zodryl DEC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088968" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.75 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088970" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.75 MG/ML Oral Suspension [Zodryl DEC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088975" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1088977" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Suspension [Zodryl DEC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089021" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.29 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089023" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.29 MG/ML Oral Suspension [Zodryl DEC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089025" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 5 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089027" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 5 MG/ML Oral Suspension [Zodryl DEC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089028" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089030" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Suspension [Zodryl DEC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316969" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089055" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089057" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet [Ambifed-G CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089058" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089060" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet [Ambifed CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089061" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089063" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet [Maxifed-G CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089070" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1089072" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [Maxifed CD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1098906" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.4 MG/ML / Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1099711" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG / Triprolidine Hydrochloride 4 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1112220" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1112224" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Zutripro]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113048" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113050" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Notuss-NXD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113051" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113053" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution [Notuss-NX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113313" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 5 MG Oral Tablet [Oxecta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113314" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 7.5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113316" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 7.5 MG Oral Tablet [Oxecta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113417" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113437" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Phenylhistine DH]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1113998" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114002" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML Oral Solution [Codar AR]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114003" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114026" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114030" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution [Codar GF]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114110" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114334" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114338" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Rezira]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1114878" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1115573" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG/ACTUAT Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="126542" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1115575" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG/ACTUAT Nasal Spray [Lazanda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="126542" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1115577" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG/ACTUAT Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="126542" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1115579" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG/ACTUAT Nasal Spray [Lazanda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="126542" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1145972" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Codar D]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1147395" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Xodol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1147709" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.5 MG/ML Oral Solution [Lortuss EX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148478" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 100 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148482" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 100 MG Extended Release Oral Capsule [ConZip]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148485" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 200 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148487" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 200 MG Extended Release Oral Capsule [ConZip]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148489" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 300 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="300 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="300.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148491" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 300 MG Extended Release Oral Capsule [ConZip]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="300 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="300.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148797" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148800" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 150 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="150 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="150.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148803" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 200 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148807" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 250 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="250 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="250.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1148809" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 50 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1149367" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 100 MG Extended Release Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1149370" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 150 MG Extended Release Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="150 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="150.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1149373" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 200 MG Extended Release Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1149376" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 250 MG Extended Release Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="250 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="250.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1149378" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR tapentadol 50 MG Extended Release Oral Tablet [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1190201" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 320.5 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Trezix]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1190284" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Morphine Sulfate 45 MG Extended Release Oral Capsule [Avinza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="45 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="45.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1190580" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.2 MG/ML / Dexbrompheniramine maleate 0.133 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1190587" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.2 MG/ML / Dexbrompheniramine maleate 0.133 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Solution [M-End Max D]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1190785" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Atropine Sulfate 0.6 MG/ML / Morphine Sulfate 10 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1232113" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 15 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1233685" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.003 MG/ML / Ropivacaine hydrochloride 2.5 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.003 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.003" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1233686" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.004 MG/ML / Ropivacaine hydrochloride 1 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.004 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.004" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1233687" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.004 MG/ML / Ropivacaine hydrochloride 2 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.004 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.004" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1233700" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 0.01 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.01 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.01" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234871" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234872" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234941" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / dihydrocodeine bitartrate 0.6 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234957" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / dihydrocodeine bitartrate 0.6 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [ColdCough PD]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234976" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Aspirin 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Synalgos-DC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234978" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 712.8 MG / Caffeine 60 MG / dihydrocodeine bitartrate 32 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="32 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="32.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234990" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Trezix]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1234999" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / dihydrocodeine bitartrate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1235009" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / dihydrocodeine bitartrate 20 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1235011" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / dihydrocodeine bitartrate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1235862" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorcyclizine hydrochloride 2.5 MG/ML / Codeine Phosphate 1.8 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236113" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 1.5 MG/ML / Guaifenesin 10 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236115" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 1.5 MG/ML / Guaifenesin 10 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution [Poly Tussin EX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236179" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 120 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="120 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="120.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236181" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236182" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236184" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 40 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236186" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 50 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236188" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 60 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236190" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 90 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="90 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="90.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1236239" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="dihydrocodeine bitartrate 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237050" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG/ACTUAT Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237055" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.1 MG/ACTUAT Mucosal Spray [Subsys]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.1 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237057" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG/ACTUAT Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237059" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.2 MG/ACTUAT Mucosal Spray [Subsys]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.2 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237060" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG/ACTUAT Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237062" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.4 MG/ACTUAT Mucosal Spray [Subsys]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237064" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG/ACTUAT Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237066" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.6 MG/ACTUAT Mucosal Spray [Subsys]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237068" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG/ACTUAT Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1237070" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.8 MG/ACTUAT Mucosal Spray [Subsys]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="346163" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Mucosal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1242106" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 100 MG/ML Cartridge [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1242503" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 25 MG/ML Cartridge [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1242558" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorcyclizine hydrochloride 2.5 MG/ML / Codeine Phosphate 1.8 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Statuss Green Reformulated Jan 2012]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1244754" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1244921" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.266 MG/ML / Codeine Phosphate 1.27 MG/ML / Phenylephrine Hydrochloride 0.666 MG/ML Oral Solution [M-End PE]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.27 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.27" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1248039" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Entuss-D Liquid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1248040" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1248044" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Nalex Expectorant]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1248046" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Vanacon]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1248115" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR tramadol hydrochloride 150 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="150 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="150.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1294356" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Bromodiphenhydramine hydrochloride 2.5 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1294380" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Diphenhydramine Tannate 5 MG/ML / hydrocodone tannate 0.7 MG/ML / Phenylephrine Tannate 1.5 MG/ML Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316946" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.7 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1294382" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Diphenhydramine Hydrochloride 2.5 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.7 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1294383" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Diphenhydramine Hydrochloride 2.5 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1297584" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Diphenhydramine Tannate 5 MG/ML / hydrocodone tannate 0.7 MG/ML / Phenylephrine Tannate 1.5 MG/ML Extended Release Suspension [Dytan-HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316946" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.7 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1297649" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine sulfate 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1302739" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol 10 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1302741" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol 10 MG/ML Injectable Solution [Dolorex Solution]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1303729" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 130 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="130 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="130.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1303731" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 130 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="130 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="130.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1303733" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 150 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="150 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="150.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1303736" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 40 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1303738" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 40 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1303740" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 70 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="70 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="70.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1303742" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Morphine Sulfate 70 MG Extended Release Oral Capsule [Kadian]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="70 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="70.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1306898" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="32 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="32.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1306900" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Tablet [Exalgo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="32 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="32.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1307056" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 4 MG / Naloxone 1 MG Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1307058" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 4 MG / Naloxone 1 MG Oral Strip [Suboxone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1307061" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 12 MG / Naloxone 3 MG Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1307063" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 12 MG / Naloxone 3 MG Oral Strip [Suboxone]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="704866" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Strip" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="12 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="12.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1308438" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1308440" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution [Nalex AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1310202" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Vicodin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1310212" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Vicodin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1310270" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Vicodin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1310927" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol 10 MG/ML Injectable Solution [Butorphic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1313294" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356315" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 20 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356319" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="tapentadol 20 MG/ML Oral Solution [Nucynta]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="787390" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="tapentadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356797" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356799" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Brovex PBC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356800" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356802" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG Oral Tablet [BroveX CB]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356804" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356806" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Brovex PBC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356807" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356809" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG Oral Tablet [BroveX CB]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1356835" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.6 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1357402" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Phenylpropanolamine Hydrochloride 2.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1357940" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Dexchlorpheniramine maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1357942" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Dexchlorpheniramine maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution [Zotex HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1358753" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1366873" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 5 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1366875" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 5 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [P-V-Tussin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1366879" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [P-V-Tussin Syrup]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1368072" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Tusnel C]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1372265" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1372873" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Vituz]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1424295" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Chlorpheniramine Maleate 2 MG / Codeine Phosphate 8 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1424297" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 6 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1431076" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 1.4 MG / Naloxone 0.36 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1431083" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 1.4 MG / Naloxone 0.36 MG Sublingual Tablet [Zubsolv]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1431102" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 5.7 MG / Naloxone 1.4 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5.7 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1431104" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 5.7 MG / Naloxone 1.4 MG Sublingual Tablet [Zubsolv]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5.7 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1431286" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1432969" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.015 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.015 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.015" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1432971" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.015 MG/HR Transdermal System [BuTrans]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.015 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.015" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1433251" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="0.5 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1433802" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Fioricet with Codeine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1440003" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.8 MG/ML / Dexchlorpheniramine maleate 0.2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1442445" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 20 MG/ML / Hydrocodone Bitartrate 0.667 MG/ML Oral Solution [Lortab]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.667 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.667" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1442790" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 5 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1487288" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet [Endocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1487611" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 50 MG/ML Topical Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316986" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Topical Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1487616" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 50 MG/ML Topical Solution [Recuvyra]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316986" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Topical Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1488634" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine hydrochloride 1.3 MG/ML Injectable Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316950" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1488639" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine hydrochloride 1.3 MG/ML Injectable Suspension [Animalgesics]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316950" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1489991" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol 10 MG/ML Injectable Solution [Torbugesic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1491832" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1491834" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Extended Release Oral Tablet [Xartemis]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1492671" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Lorcet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1492673" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Lorcet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1492675" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lorcet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1495472" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Lortab]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1495474" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Lortab]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1495476" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lortab]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1535979" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine Hydrochloride 1.6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.65 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.65" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1535981" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Chlorpheniramine Maleate 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine Hydrochloride 1.6 MG/ML Oral Solution [Z-Cof HC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.65 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.65" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1536457" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 8 MG Effervescent Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1535727" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Effervescent Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1536459" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 500 MG / Codeine Phosphate 30 MG Effervescent Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1535727" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Effervescent Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1537116" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Primlev]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1537120" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Primlev]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1537122" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 300 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Primlev]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1541630" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Brompheniramine Maleate 0.8 MG/ML / Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1542390" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2.1 MG / Naloxone 0.3 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.1 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1542396" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2.1 MG / Naloxone 0.3 MG Buccal Film [Bunavail]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.1 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.1" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1542981" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet [Verdrocet]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1542988" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Xylon]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1542997" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.0075 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.0075 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.0075" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1542999" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="168 HR Buprenorphine 0.0075 MG/HR Transdermal System [BuTrans]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.0075 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.0075" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1544851" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 4.2 MG / Naloxone 0.7 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1544853" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 4.2 MG / Naloxone 0.7 MG Buccal Film [Bunavail]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1544854" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 6.3 MG / Naloxone 1 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1544856" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 6.3 MG / Naloxone 1 MG Buccal Film [Bunavail]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="6.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="6.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1545903" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naloxone Hydrochloride 10 MG / Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1545907" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naloxone Hydrochloride 20 MG / Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1545910" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naloxone Hydrochloride 5 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1546089" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naloxone Hydrochloride 5 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet [Targiniq]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1547607" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Lortuss EX]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1594650" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 1.8 MG/ML Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1594655" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 1.8 MG/ML Injectable Solution [Simbadol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.8" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595214" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution [Ninjacof XG]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1.6 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595730" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595736" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Tablet [Hysingla]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595740" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595742" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Tablet [Hysingla]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595746" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595748" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Tablet [Hysingla]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595752" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 60 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595754" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 60 MG Extended Release Oral Tablet [Hysingla]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595758" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 80 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595760" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 80 MG Extended Release Oral Tablet [Hysingla]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595764" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595766" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 100 MG Extended Release Oral Tablet [Hysingla]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595770" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 120 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="120 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="120.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1595772" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 24 HR Hydrocodone Bitartrate 120 MG Extended Release Oral Tablet [Hysingla]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="120 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="120.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1596108" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 320.5 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316965" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1597568" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 11.4 MG / Naloxone 2.9 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="11.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="11.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1597570" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 11.4 MG / Naloxone 2.9 MG Sublingual Tablet [Zubsolv]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="11.4 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="11.4" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1597573" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 8.6 MG / Naloxone 2.1 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1597575" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 8.6 MG / Naloxone 2.1 MG Sublingual Tablet [Zubsolv]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1598284" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Obredon]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1603495" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.0375 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.0375 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.0375" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1603498" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.0625 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.0625 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.0625" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1603501" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="72 HR Fentanyl 0.0875 MG/HR Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.0875 MG/HR" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.0875" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/HR" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1650982" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Flowtuss]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1651558" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1651564" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Hycofenix]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1652087" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 0.8 MG/ML / CODEINE POLISTIREX 4 MG/ML Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316946" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1652093" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR CHLORPHENIRAMINE POLISTIREX 0.8 MG/ML / CODEINE POLISTIREX 4 MG/ML Extended Release Suspension [Tuzistra]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316946" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Suspension" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1655032" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Buprenorphine 0.3 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1655058" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 150 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="150 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="150.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1655060" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Meperidine Hydrochloride 75 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="75.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1661319" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML / Triprolidine Hydrochloride 0.5 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1661325" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML / Triprolidine Hydrochloride 0.5 MG/ML Oral Solution [Histex AC]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1664448" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 5 MG Oral Tablet [Oxaydo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1664543" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Chlorpheniramine Maleate 8 MG / Codeine Phosphate 54.3 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="54.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="54.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1664634" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Oxycodone Hydrochloride 7.5 MG Oral Tablet [Oxaydo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="7.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="7.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665685" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 100 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665687" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 100 MG/ML Injection [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665690" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1.5 ML Meperidine Hydrochloride 50 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665691" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1.5 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665697" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 50 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665698" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665699" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="0.5 ML Meperidine Hydrochloride 50 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665700" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="0.5 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665701" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Meperidine Hydrochloride 50 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1665702" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="6754" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Meperidine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1666338" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2.9 MG / Naloxone 0.71 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.9" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1666385" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 2.9 MG / Naloxone 0.71 MG Sublingual Tablet [Zubsolv]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2.9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.9" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1666831" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.04 MG Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.04 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.04" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1666837" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.04 MG Transdermal System [Ionsys]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316987" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Transdermal System" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.04 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.04" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716057" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.15 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.15" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716063" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.15 MG Buccal Film [Belbuca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.15" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716065" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.3 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716067" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.3 MG Buccal Film [Belbuca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716069" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.45 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.45 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.45" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716071" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.45 MG Buccal Film [Belbuca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.45 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.45" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716073" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.6 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716075" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.6 MG Buccal Film [Belbuca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.6 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.6" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716077" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.075 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.075 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.075" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716079" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.075 MG Buccal Film [Belbuca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.075 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.075" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716081" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.75 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.75" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716083" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.75 MG Buccal Film [Belbuca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.75 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.75" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716086" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.9 MG Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.9" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1716090" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.9 MG Buccal Film [Belbuca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="858080" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Buccal Film" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.9" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724276" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 2 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724338" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 10 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724340" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="5 ML Hydromorphone Hydrochloride 10 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724341" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="50 ML Hydromorphone Hydrochloride 10 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724352" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 250 MG Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="250 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="250.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724354" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Hydromorphone Hydrochloride 250 MG Injection [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="250 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="250.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724356" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724358" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="5 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724359" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="50 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724383" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 1 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1724644" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 2 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728351" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Butorphanol Tartrate 2 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728355" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Butorphanol Tartrate 2 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728783" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Morphine Sulfate 0.5 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728784" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Morphine Sulfate 0.5 MG/ML Injection [Astramorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728789" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="30 ML Morphine Sulfate 0.5 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728791" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Morphine Sulfate 0.5 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728792" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Morphine Sulfate 0.5 MG/ML Injection [Astramorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728800" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Morphine Sulfate 1 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728801" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Morphine Sulfate 1 MG/ML Injection [Astramorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728805" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Morphine Sulfate 1 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728806" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Morphine Sulfate 1 MG/ML Injection [Astramorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1728999" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="30 ML Morphine Sulfate 1 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1729197" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 2 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1729320" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.3 MG/ACTUAT Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="126542" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1729322" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Fentanyl 0.3 MG/ACTUAT Nasal Spray [Lazanda]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="126542" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Nasal Spray" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.3 MG/ACTUAT" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.3" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ACTUAT" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731517" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Morphine Sulfate 25 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731520" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="4 ML Morphine Sulfate 25 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731522" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="20 ML Morphine Sulfate 25 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="25 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="25.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731530" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 15 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731537" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="20 ML Morphine Sulfate 50 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731545" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="50 ML Morphine Sulfate 50 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731993" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 10 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731995" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 10 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731998" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="20 ML Morphine Sulfate 10 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1731999" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="20 ML Morphine Sulfate 10 MG/ML Injection [Infumorph]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1732003" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 8 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1732006" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 4 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1732011" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 8 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="8 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="8.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1732014" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 4 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1732136" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 5 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1732138" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="30 ML Morphine Sulfate 5 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1733080" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Morphine Sulfate 15 MG/ML Cartridge" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649572" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Cartridge" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735003" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Fentanyl 0.05 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735006" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Fentanyl 0.05 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735007" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="5 ML Fentanyl 0.05 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735008" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="20 ML Fentanyl 0.05 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735013" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="50 ML Fentanyl 0.05 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735057" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="2 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735060" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="5 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735062" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="20 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1735065" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="10 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="4337" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Fentanyl" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.05 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.05" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1745881" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet [Morphabond]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1745886" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet [Morphabond]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1745889" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet [Morphabond]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1745892" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet [Morphabond]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1790527" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 9 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="9.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1790533" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 9 MG Extended Release Oral Capsule [Xtampza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="9 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="9.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791558" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 13.5 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="13.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="13.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791560" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 13.5 MG Extended Release Oral Capsule [Xtampza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="13.5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="13.5" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791567" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 18 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="18 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="18.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791569" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 18 MG Extended Release Oral Capsule [Xtampza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="18 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="18.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791574" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 27 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="27 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="27.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791576" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 27 MG Extended Release Oral Capsule [Xtampza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="27 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="27.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791580" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 36 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="36 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="36.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1791582" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone 36 MG Extended Release Oral Capsule [Xtampza]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="36 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="36.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1792707" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Codeine Phosphate 2 MG/ML / Guaifenesin 40 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316968" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="2670" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Codeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1797650" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 74.2 MG Drug Implant" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="657710" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Drug Implant" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="74.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="74.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1797655" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 74.2 MG Drug Implant [Probuphine]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="657710" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Drug Implant" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="74.2 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="74.2" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1806701" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naltrexone hydrochloride 1.2 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1806707" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naltrexone hydrochloride 1.2 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Capsule [Troxyca]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1806710" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naltrexone hydrochloride 2.4 MG / Oxycodone Hydrochloride 20 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1806716" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naltrexone hydrochloride 3.6 MG / Oxycodone Hydrochloride 30 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1806722" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naltrexone hydrochloride 4.8 MG / Oxycodone Hydrochloride 40 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1806728" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naltrexone hydrochloride 7.2 MG / Oxycodone Hydrochloride 60 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1806734" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Naltrexone hydrochloride 9.6 MG / Oxycodone Hydrochloride 80 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1809204" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol Tartrate 2 MG/ML Injectable Solution [Torbugesic]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1811473" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Pentazocine 30 MG/ML Injection" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1811475" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Pentazocine 30 MG/ML Injection [Talwin]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="1649574" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injection" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="8001" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Pentazocine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1812164" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Acetaminophen 325 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="23088" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="dihydrocodeine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="16 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="16.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860127" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860129" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860137" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860148" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="80 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="80.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860151" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860154" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860157" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860491" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 10 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860492" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 10 MG Extended Release Oral Capsule [Zohydro]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860493" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 15 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860494" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 15 MG Extended Release Oral Capsule [Zohydro]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860495" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860496" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Capsule [Zohydro]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="20 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="20.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860497" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860498" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Capsule [Zohydro]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860499" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860500" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Capsule [Zohydro]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="40 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="40.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860501" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 50 MG Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1860502" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="12 HR Hydrocodone Bitartrate 50 MG Extended Release Oral Capsule [Zohydro]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316943" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Capsule" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="5489" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydrocodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="50 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="50.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1864412" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.7 MG / Naloxone 0.18 MG Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.7 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1864414" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Buprenorphine 0.7 MG / Naloxone 0.18 MG Sublingual Tablet [Zubsolv]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317007" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Sublingual Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1819" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Buprenorphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="0.7 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="0.7" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1871434" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1871440" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet [Arymo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1871441" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1871443" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet [Arymo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1871444" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1871446" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet [Arymo]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="60 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="60.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1872234" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent 12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7052" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Morphine" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1872265" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1872269" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 2 MG/ML Prefilled Syringe [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="2 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="2.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1872271" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 4 MG/ML Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1872272" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="1 ML Hydromorphone Hydrochloride 4 MG/ML Prefilled Syringe [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="4 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="4.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1872752" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="0.5 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe [Dilaudid]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="721656" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Prefilled Syringe" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="3423" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Hydromorphone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="1 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1944529" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Oxycodone Hydrochloride 15 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1944535" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Oxycodone Hydrochloride 15 MG Oral Tablet [Roxybond]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="15 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="15.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1944538" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Oxycodone Hydrochloride 30 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1944540" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Oxycodone Hydrochloride 30 MG Oral Tablet [Roxybond]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="30 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="30.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1944541" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Oxycodone Hydrochloride 5 MG Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1944543" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Abuse-Deterrent Oxycodone Hydrochloride 5 MG Oral Tablet [Roxybond]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="317541" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="7804" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Oxycodone" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="5 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="5.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1946525" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Matrix Delivery 24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="300 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="300.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1946527" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Matrix Delivery 24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="200 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="200.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1946529" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Matrix Delivery 24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316945" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Extended Release Oral Tablet" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="10689" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Tramadol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="100 MG" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="100.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG" xsi:type="Literal"/>
               </element>
            </element>
            <element xsi:type="Tuple">
               <element name="drugCode">
                  <value valueType="t:Integer" value="1947138" xsi:type="Literal"/>
               </element>
               <element name="drugName">
                  <value valueType="t:String" value="Butorphanol 10 MG/ML Injectable Solution [Torphaject]" xsi:type="Literal"/>
               </element>
               <element name="doseFormCode">
                  <value valueType="t:Integer" value="316949" xsi:type="Literal"/>
               </element>
               <element name="doseFormName">
                  <value valueType="t:String" value="Injectable Solution" xsi:type="Literal"/>
               </element>
               <element name="ingredientCode">
                  <value valueType="t:Integer" value="1841" xsi:type="Literal"/>
               </element>
               <element name="ingredientName">
                  <value valueType="t:String" value="Butorphanol" xsi:type="Literal"/>
               </element>
               <element name="strength">
                  <value valueType="t:String" value="10 MG/ML" xsi:type="Literal"/>
               </element>
               <element name="strengthValue">
                  <value valueType="t:Decimal" value="10.0" xsi:type="Literal"/>
               </element>
               <element name="strengthUnit">
                  <value valueType="t:String" value="MG/ML" xsi:type="Literal"/>
               </element>
            </element>
         </expression>
      </def>
   </statements>
</library>

"/>
   </content>
</Library>
