{
  "resourceType": "Library",
  "id": "OpioidCDSREC04PatientView",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSREC04PatientView</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> Logic Library </td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>http://fhir.org/guides/cdc/opioid-cds/Library/library-OpioidCDSCommon</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>http://fhir.org/guides/cdc/opioid-cds/Library/library-OpioidCDSRoutines</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSREC04PatientView version '1.2.3'\n\nusing FHIR version '3.0.0'\n\ninclude FHIRHelpers version '3.0.0' called FHIRHelpers\ninclude OpioidCDSCommon version '1.2.3' called Common\ninclude OpioidCDSRoutines version '1.2.3' called Routines\n\n/*\n**\n**  Recommendation #4\n**    Prescribe immediate-release opioids instead of extended-release/long-acting (ER/LA) opioids\n**\n**  When\n**    Provider is prescribing an extended release opioid with ambulatory misuse potential in the outpatient setting\n**    Prescription is for treating chronic pain.\n**    Opioid review is useful for this patient:\n**      Patient is 18 or over\n**      Patient does not have findings indicating limited life expectancy\n**      Patient does not have orders for therapies indicating end of life care\n**      Patient is not undergoing active cancer treatment:\n**        Patient has had at least 2 encounters within the past year with any diagnosis of cancer\n**    Patient is opioid naive:\n**      No indication of opioid use in the past 90 days from a prescription, self report, or a dispensing event\n**  Then\n**    Recommend use of immediate release opioids:\n**      Will prescribe immediate release opioid analgesic with ambulatory misuse potential\n**      Benefits outweigh risks, snooze 3 months\n**      N/A - see comment, snooze 3 months\n**\n*/\n\n// META: Plan Definition: http://fhir.org/guides/cdc/opioid-cds-r4/PlanDefinition/opioid-cds-04\n\ncontext Patient\n\ndefine &quot;Inclusion Period&quot;:\n  Interval[Today() - 91 days, Today() - 1 days]\n\ndefine &quot;Encounter Period&quot;:\n  Interval[Today() - 12 months - 1 days, Today() - 1 days]\n\ndefine &quot;Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions&quot;:\n  Common.&quot;Active Ambulatory Opioid Rx&quot; AmbulatoryOpioidPrescription\n    where Routines.&quot;Is Chronic Pain Prescription?&quot;(AmbulatoryOpioidPrescription)\n      and AmbulatoryOpioidPrescription.medication in Common.&quot;Extended release opioid analgesics with ambulatory misuse potential&quot;\n\ndefine &quot;Patient Is Being Prescribed Extended Release Opioid Analgesic with Ambulatory Misuse Potential&quot;:\n  exists (&quot;Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions&quot;)\n\ndefine &quot;Is Recommendation Applicable?&quot;:\n  &quot;Inclusion Criteria&quot;\n    and not &quot;Exclusion Criteria&quot;\n\ndefine &quot;Inclusion Criteria&quot;:\n  &quot;Patient Is Being Prescribed Extended Release Opioid Analgesic with Ambulatory Misuse Potential&quot;\n    and Routines.&quot;Is Opioid Review Useful?&quot;\n    and Routines.&quot;Is Opioid Naive?&quot;\n\ndefine &quot;Exclusion Criteria&quot;:\n  Common.&quot;End of Life Assessment&quot;\n\ndefine &quot;Get Indicator&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'warning'\n  else null\n\ndefine &quot;Get Summary&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'Recommend use of immediate-release opioids instead of extended release/long acting opioids when starting patient on opioids.'\n  else null\n\ndefine &quot;Get Detail&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'The following medication requests(s) release rates should be re-evaluated: ' + Combine(flatten(Common.GetMedicationNames(&quot;Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions&quot;)), ', ')\n  else null\n\n  // Detected Issue - Prescribe immediate-release opioids instead of extended-release/long-acting (ER/LA) opioids\n\n  define &quot;Extended Release Opioid Prescription Issue&quot;:\n    DetectedIssue {\n      //identifier:,\n      status: FHIR.ObservationStatus { value: 'preliminary' },\n      category: FHIR.CodeableConcept { text: FHIR.string { value: &quot;Get Summary&quot; } },\n      severity: FHIR.DetectedIssueSeverity { value: 'moderate' },\n      patient: FHIR.Reference { reference: FHIR.string { value: 'Patient/' + Patient.id } },\n      date: FHIR.dateTime { value: Now() },\n      // TODO: Device representation...\n      // author:,\n      implicated:\n        (&quot;Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions&quot;) M\n          return FHIR.Reference { reference: FHIR.string { value: 'MedicationRequest/' + M.id } },\n      detail: FHIR.string { value: &quot;Get Detail&quot; },\n      reference: FHIR.uri { value: 'http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-04-patient-view'}\n    }\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC04PatientView",
  "version": "1.2.3",
  "name": "OpioidCDSREC04PatientView",
  "title": "Library - Opioid CDS Logic for recommendation #4 (patient-view)",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "relatedArtifact": [ {
    "type": "documentation",
    "display": "CDC guideline for prescribing opioids for chronic pain",
    "url": "https://www.cdc.gov/mmwr/volumes/65/rr/rr6501e1.htm?CDC_AA_refVal=https%3A%2F%2Fwww.cdc.gov%2Fmmwr%2Fvolumes%2F65%2Frr%2Frr6501e1er.htm"
  }, {
    "type": "depends-on",
    "resource": {
      "reference": "Library/FHIR-ModelInfo"
    }
  }, {
    "type": "depends-on",
    "resource": {
      "reference": "Library/FHIRHelpers"
    }
  }, {
    "type": "depends-on",
    "resource": {
      "reference": "Library/OpioidCDSCommon"
    }
  }, {
    "type": "depends-on",
    "resource": {
      "reference": "Library/OpioidCDSRoutines"
    }
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Patient Is Being Prescribed Extended Release Opioid Analgesic with Ambulatory Misuse Potential",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Inclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Exclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Is Recommendation Applicable?",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Get Indicator",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Get Summary",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Get Detail",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Extended Release Opioid Prescription Issue",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "DetectedIssue"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBPcGlvaWRDRFNSRUMwNFBhdGllbnRWaWV3IHZlcnNpb24gJzEuMi4zJw0KDQp1c2luZyBGSElSIHZlcnNpb24gJzMuMC4wJw0KDQppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzMuMC4wJyBjYWxsZWQgRkhJUkhlbHBlcnMNCmluY2x1ZGUgT3Bpb2lkQ0RTQ29tbW9uIHZlcnNpb24gJzEuMi4zJyBjYWxsZWQgQ29tbW9uDQppbmNsdWRlIE9waW9pZENEU1JvdXRpbmVzIHZlcnNpb24gJzEuMi4zJyBjYWxsZWQgUm91dGluZXMNCg0KLyoNCioqDQoqKiAgUmVjb21tZW5kYXRpb24gIzQNCioqICAgIFByZXNjcmliZSBpbW1lZGlhdGUtcmVsZWFzZSBvcGlvaWRzIGluc3RlYWQgb2YgZXh0ZW5kZWQtcmVsZWFzZS9sb25nLWFjdGluZyAoRVIvTEEpIG9waW9pZHMNCioqDQoqKiAgV2hlbg0KKiogICAgUHJvdmlkZXIgaXMgcHJlc2NyaWJpbmcgYW4gZXh0ZW5kZWQgcmVsZWFzZSBvcGlvaWQgd2l0aCBhbWJ1bGF0b3J5IG1pc3VzZSBwb3RlbnRpYWwgaW4gdGhlIG91dHBhdGllbnQgc2V0dGluZw0KKiogICAgUHJlc2NyaXB0aW9uIGlzIGZvciB0cmVhdGluZyBjaHJvbmljIHBhaW4uDQoqKiAgICBPcGlvaWQgcmV2aWV3IGlzIHVzZWZ1bCBmb3IgdGhpcyBwYXRpZW50Og0KKiogICAgICBQYXRpZW50IGlzIDE4IG9yIG92ZXINCioqICAgICAgUGF0aWVudCBkb2VzIG5vdCBoYXZlIGZpbmRpbmdzIGluZGljYXRpbmcgbGltaXRlZCBsaWZlIGV4cGVjdGFuY3kNCioqICAgICAgUGF0aWVudCBkb2VzIG5vdCBoYXZlIG9yZGVycyBmb3IgdGhlcmFwaWVzIGluZGljYXRpbmcgZW5kIG9mIGxpZmUgY2FyZQ0KKiogICAgICBQYXRpZW50IGlzIG5vdCB1bmRlcmdvaW5nIGFjdGl2ZSBjYW5jZXIgdHJlYXRtZW50Og0KKiogICAgICAgIFBhdGllbnQgaGFzIGhhZCBhdCBsZWFzdCAyIGVuY291bnRlcnMgd2l0aGluIHRoZSBwYXN0IHllYXIgd2l0aCBhbnkgZGlhZ25vc2lzIG9mIGNhbmNlcg0KKiogICAgUGF0aWVudCBpcyBvcGlvaWQgbmFpdmU6DQoqKiAgICAgIE5vIGluZGljYXRpb24gb2Ygb3Bpb2lkIHVzZSBpbiB0aGUgcGFzdCA5MCBkYXlzIGZyb20gYSBwcmVzY3JpcHRpb24sIHNlbGYgcmVwb3J0LCBvciBhIGRpc3BlbnNpbmcgZXZlbnQNCioqICBUaGVuDQoqKiAgICBSZWNvbW1lbmQgdXNlIG9mIGltbWVkaWF0ZSByZWxlYXNlIG9waW9pZHM6DQoqKiAgICAgIFdpbGwgcHJlc2NyaWJlIGltbWVkaWF0ZSByZWxlYXNlIG9waW9pZCBhbmFsZ2VzaWMgd2l0aCBhbWJ1bGF0b3J5IG1pc3VzZSBwb3RlbnRpYWwNCioqICAgICAgQmVuZWZpdHMgb3V0d2VpZ2ggcmlza3MsIHNub296ZSAzIG1vbnRocw0KKiogICAgICBOL0EgLSBzZWUgY29tbWVudCwgc25vb3plIDMgbW9udGhzDQoqKg0KKi8NCg0KLy8gTUVUQTogUGxhbiBEZWZpbml0aW9uOiBodHRwOi8vZmhpci5vcmcvZ3VpZGVzL2NkYy9vcGlvaWQtY2RzLXI0L1BsYW5EZWZpbml0aW9uL29waW9pZC1jZHMtMDQNCg0KY29udGV4dCBQYXRpZW50DQoNCmRlZmluZSAiQ2hyb25pYyBQYWluIEV4dGVuZGVkIFJlbGVhc2UgT3Bpb2lkIEFuYWxnZXNpYyB3aXRoIEFtYnVsYXRvcnkgTWlzdXNlIFBvdGVudGlhbCBQcmVzY3JpcHRpb25zIjoNCiAgQ29tbW9uLiJBY3RpdmUgQW1idWxhdG9yeSBPcGlvaWQgUngiIEFtYnVsYXRvcnlPcGlvaWRQcmVzY3JpcHRpb24NCiAgICB3aGVyZSBSb3V0aW5lcy4iSXMgQ2hyb25pYyBQYWluIFByZXNjcmlwdGlvbj8iKEFtYnVsYXRvcnlPcGlvaWRQcmVzY3JpcHRpb24pDQogICAgICBhbmQgQW1idWxhdG9yeU9waW9pZFByZXNjcmlwdGlvbi5tZWRpY2F0aW9uIGluIENvbW1vbi4iRXh0ZW5kZWQgcmVsZWFzZSBvcGlvaWQgYW5hbGdlc2ljcyB3aXRoIGFtYnVsYXRvcnkgbWlzdXNlIHBvdGVudGlhbCINCg0KZGVmaW5lICJQYXRpZW50IElzIEJlaW5nIFByZXNjcmliZWQgRXh0ZW5kZWQgUmVsZWFzZSBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsIjoNCiAgZXhpc3RzICgiQ2hyb25pYyBQYWluIEV4dGVuZGVkIFJlbGVhc2UgT3Bpb2lkIEFuYWxnZXNpYyB3aXRoIEFtYnVsYXRvcnkgTWlzdXNlIFBvdGVudGlhbCBQcmVzY3JpcHRpb25zIikNCg0KZGVmaW5lICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyI6DQogICJJbmNsdXNpb24gQ3JpdGVyaWEiDQogICAgYW5kIG5vdCAiRXhjbHVzaW9uIENyaXRlcmlhIg0KDQpkZWZpbmUgIkluY2x1c2lvbiBDcml0ZXJpYSI6DQogICJQYXRpZW50IElzIEJlaW5nIFByZXNjcmliZWQgRXh0ZW5kZWQgUmVsZWFzZSBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsIg0KICAgIGFuZCBSb3V0aW5lcy4iSXMgT3Bpb2lkIFJldmlldyBVc2VmdWw/Ig0KICAgIGFuZCBSb3V0aW5lcy4iSXMgT3Bpb2lkIE5haXZlPyINCg0KZGVmaW5lICJFeGNsdXNpb24gQ3JpdGVyaWEiOg0KICBDb21tb24uIkVuZCBvZiBMaWZlIEFzc2Vzc21lbnQiDQoNCmRlZmluZSAiR2V0IEluZGljYXRvciI6DQogIGlmICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyINCiAgICB0aGVuICd3YXJuaW5nJw0KICBlbHNlIG51bGwNCg0KZGVmaW5lICJHZXQgU3VtbWFyeSI6DQogIGlmICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyINCiAgICB0aGVuICdSZWNvbW1lbmQgdXNlIG9mIGltbWVkaWF0ZS1yZWxlYXNlIG9waW9pZHMgaW5zdGVhZCBvZiBleHRlbmRlZCByZWxlYXNlL2xvbmcgYWN0aW5nIG9waW9pZHMgd2hlbiBzdGFydGluZyBwYXRpZW50IG9uIG9waW9pZHMuJw0KICBlbHNlIG51bGwNCg0KZGVmaW5lICJHZXQgRGV0YWlsIjoNCiAgaWYgIklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/Ig0KICAgIHRoZW4gJ1RoZSBmb2xsb3dpbmcgbWVkaWNhdGlvbiByZXF1ZXN0cyhzKSByZWxlYXNlIHJhdGVzIHNob3VsZCBiZSByZS1ldmFsdWF0ZWQ6ICcgKyBDb21iaW5lKENvbW1vbi5HZXRNZWRpY2F0aW9uTmFtZXMoIkNocm9uaWMgUGFpbiBFeHRlbmRlZCBSZWxlYXNlIE9waW9pZCBBbmFsZ2VzaWMgd2l0aCBBbWJ1bGF0b3J5IE1pc3VzZSBQb3RlbnRpYWwgUHJlc2NyaXB0aW9ucyIpLCAnLCAnKQ0KICBlbHNlIG51bGwNCg0KICAvLyBEZXRlY3RlZCBJc3N1ZSAtIFByZXNjcmliZSBpbW1lZGlhdGUtcmVsZWFzZSBvcGlvaWRzIGluc3RlYWQgb2YgZXh0ZW5kZWQtcmVsZWFzZS9sb25nLWFjdGluZyAoRVIvTEEpIG9waW9pZHMNCg0KICBkZWZpbmUgIkV4dGVuZGVkIFJlbGVhc2UgT3Bpb2lkIFByZXNjcmlwdGlvbiBJc3N1ZSI6DQogICAgRGV0ZWN0ZWRJc3N1ZSB7DQogICAgICAvL2lkZW50aWZpZXI6LA0KICAgICAgc3RhdHVzOiBGSElSLk9ic2VydmF0aW9uU3RhdHVzIHsgdmFsdWU6ICdwcmVsaW1pbmFyeScgfSwNCiAgICAgIGNhdGVnb3J5OiBGSElSLkNvZGVhYmxlQ29uY2VwdCB7IHRleHQ6IEZISVIuc3RyaW5nIHsgdmFsdWU6ICJHZXQgU3VtbWFyeSIgfSB9LA0KICAgICAgc2V2ZXJpdHk6IEZISVIuRGV0ZWN0ZWRJc3N1ZVNldmVyaXR5IHsgdmFsdWU6ICdtb2RlcmF0ZScgfSwNCiAgICAgIHBhdGllbnQ6IEZISVIuUmVmZXJlbmNlIHsgcmVmZXJlbmNlOiBGSElSLnN0cmluZyB7IHZhbHVlOiAnUGF0aWVudC8nICsgUGF0aWVudC5pZCB9IH0sDQogICAgICBkYXRlOiBGSElSLmRhdGVUaW1lIHsgdmFsdWU6IE5vdygpIH0sDQogICAgICAvLyBUT0RPOiBEZXZpY2UgcmVwcmVzZW50YXRpb24uLi4NCiAgICAgIC8vIGF1dGhvcjosDQogICAgICBpbXBsaWNhdGVkOg0KICAgICAgICAoIkNocm9uaWMgUGFpbiBFeHRlbmRlZCBSZWxlYXNlIE9waW9pZCBBbmFsZ2VzaWMgd2l0aCBBbWJ1bGF0b3J5IE1pc3VzZSBQb3RlbnRpYWwgUHJlc2NyaXB0aW9ucyIpIE0NCiAgICAgICAgICByZXR1cm4gRkhJUi5SZWZlcmVuY2UgeyByZWZlcmVuY2U6IEZISVIuc3RyaW5nIHsgdmFsdWU6ICdNZWRpY2F0aW9uUmVxdWVzdC8nICsgTS5pZCB9IH0sDQogICAgICBkZXRhaWw6IEZISVIuc3RyaW5nIHsgdmFsdWU6ICJHZXQgRGV0YWlsIiB9LA0KICAgICAgcmVmZXJlbmNlOiBGSElSLnVyaSB7IHZhbHVlOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9jZGMvb3Bpb2lkLWNkcy9QbGFuRGVmaW5pdGlvbi9vcGlvaWRjZHMtMDQtcGF0aWVudC12aWV3J30NCiAgICB9DQo="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}