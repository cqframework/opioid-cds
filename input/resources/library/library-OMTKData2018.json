{
  "resourceType": "Library",
  "id": "library-OMTKData2018",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OMTKData2018</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> Logic Library </td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OMTKData2018 version '1.2.3'\n\ndefine Months: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }\n\ndefine Days28: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28\n}\ndefine Days29: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29\n}\ndefine Days30: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29, 30\n}\ndefine Days31: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n  31\n}\n\n/*\nReturns true if the given year is a leap year, false otherwise\n*/\ndefine function IsLeapYear(y Integer):\n  (y mod 4 = 0 and y mod 100 != 0) or y mod 400 = 0  \n\n\n/*\nReturns a list of the days in the given month in the given year\nList&lt;DateTime&gt;\n*/  \ndefine function DaysInMonth(y Integer, m Integer):\n  (\n    case \n      when m in { 1, 3, 5, 7, 8, 10, 12 } then Days31\n      when m = 2 then if IsLeapYear(y) then Days29 else Days28\n      else Days30\n    end\n  ) D\n    return DateTime(y, m, D)\n\n/*\nReturns a list of the days in the given year\nList&lt;DateTime&gt;\n*/\ndefine function DaysInYear(y Integer):\n  flatten (\n    Months M\n      return DaysInMonth(y, M)\n  )\n\ndefine function DaysInPeriod(period Interval&lt;DateTime&gt;):\n  case\n    when start of period is null or end of period is null then null\n    when start of period same year as end of period then\n      case\n        when month from start of period = month from end of period then\n          (DaysInMonth(year from start of period, month from start of period)) D\n            where D same day or after start of period\n              and D same day or before end of period\n        else\n          (DaysInYear(year from start of period)) D\n            where D same day or after start of period\n              and D same day or before end of period\n      end\n    when difference in years between start of period and end of period = 1 then\n      (\n        (DaysInYear(year from start of period)) D\n          where D same day or after start of period\n            and D same day or before end of period\n        )\n        union (\n          (DaysInYear(year from end of period)) D\n            where D same day or after start of period\n              and D same day or before end of period\n          )\n    else null // Should maybe throw, can't calculate arbitrary years, need the expand operator (1.3)\n  end\n\n/*\nDrugIngredients:\n  List&lt;{ \n    drugCode Integer, \n    drugName String, \n    doseFormCode Integer, \n    doseFormName String, \n    ingredientCode Integer, \n    ingredientName String, \n    strength String, \n    strengthValue Decimal, \n    strengthUnit String \n  }&gt;\n*/\n// Generated from LocalDataStore_RxNav_Opioids-2018-02-28.db\ndefine DrugIngredients:\n{ \n  { drugCode: 197696, drugName: '72 HR Fentanyl 0.075 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.075 MG/HR', strengthValue: 0.075, strengthUnit: 'MG/HR' }, \n  { drugCode: 197873, drugName: 'Levorphanol 2 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6378, ingredientName: 'Levorphanol', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 198402, drugName: 'Fentanyl 1.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 198403, drugName: 'Fentanyl 2.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '2.5 MG/ML', strengthValue: 2.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 199400, drugName: 'Codeine 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 199789, drugName: 'Pentazocine 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 205533, drugName: '1 ML Buprenorphine 0.3 MG/ML Injection [Buprenex]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG/ML', strengthValue: 0.3, strengthUnit: 'MG/ML' }, \n  { drugCode: 211354, drugName: 'Acetaminophen 650 MG / Pentazocine 25 MG Oral Tablet [Talacen]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' }, \n  { drugCode: 238129, drugName: '1 ML Buprenorphine 0.3 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG/ML', strengthValue: 0.3, strengthUnit: 'MG/ML' }, \n  { drugCode: 238133, drugName: 'Pentazocine 30 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 245134, drugName: '72 HR Fentanyl 0.025 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.025 MG/HR', strengthValue: 0.025, strengthUnit: 'MG/HR' }, \n  { drugCode: 245135, drugName: '72 HR Fentanyl 0.05 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/HR', strengthValue: 0.05, strengthUnit: 'MG/HR' }, \n  { drugCode: 245136, drugName: '72 HR Fentanyl 0.1 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/HR', strengthValue: 0.1, strengthUnit: 'MG/HR' }, \n  { drugCode: 246474, drugName: 'Buprenorphine 0.2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 250426, drugName: 'Buprenorphine 0.4 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 250485, drugName: 'Pentazocine 25 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' }, \n  { drugCode: 250486, drugName: 'Pentazocine 50 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 250877, drugName: 'Pentazocine 50 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 261106, drugName: 'Fentanyl 0.2 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 261107, drugName: 'Fentanyl 0.6 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 261108, drugName: 'Fentanyl 0.8 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' }, \n  { drugCode: 261109, drugName: 'Fentanyl 1.2 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.2 MG', strengthValue: 1.2, strengthUnit: 'MG' }, \n  { drugCode: 261110, drugName: 'Fentanyl 1.6 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.6 MG', strengthValue: 1.6, strengthUnit: 'MG' }, \n  { drugCode: 261184, drugName: '72 HR Fentanyl 0.025 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.025 MG/HR', strengthValue: 0.025, strengthUnit: 'MG/HR' }, \n  { drugCode: 261185, drugName: '72 HR Fentanyl 0.05 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/HR', strengthValue: 0.05, strengthUnit: 'MG/HR' }, \n  { drugCode: 261186, drugName: '72 HR Fentanyl 0.075 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.075 MG/HR', strengthValue: 0.075, strengthUnit: 'MG/HR' }, \n  { drugCode: 262071, drugName: '72 HR Fentanyl 0.1 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/HR', strengthValue: 0.1, strengthUnit: 'MG/HR' }, \n  { drugCode: 262219, drugName: 'Fentanyl 0.4 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 310293, drugName: 'Fentanyl 1.2 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.2 MG', strengthValue: 1.2, strengthUnit: 'MG' }, \n  { drugCode: 310294, drugName: 'Fentanyl 1.6 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.6 MG', strengthValue: 1.6, strengthUnit: 'MG' }, \n  { drugCode: 310295, drugName: 'Fentanyl 0.2 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 310296, drugName: 'Fentanyl 0.3 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' }, \n  { drugCode: 310297, drugName: 'Fentanyl 0.4 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 311297, drugName: 'Levomethadyl 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 237005, ingredientName: 'Levomethadyl', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 311300, drugName: 'Levorphanol 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6378, ingredientName: 'Levorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 312288, drugName: 'Acetaminophen 650 MG / Pentazocine 25 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' }, \n  { drugCode: 312289, drugName: 'Naloxone 0.5 MG / Pentazocine 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 313992, drugName: 'Fentanyl 0.6 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 313993, drugName: 'Fentanyl 0.8 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' }, \n  { drugCode: 351264, drugName: 'Buprenorphine 2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 351265, drugName: 'Buprenorphine 8 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 351266, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 351267, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 388506, drugName: '72 HR Buprenorphine 0.07 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.07 MG/HR', strengthValue: 0.07, strengthUnit: 'MG/HR' }, \n  { drugCode: 388507, drugName: '72 HR Buprenorphine 0.0525 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.0525 MG/HR', strengthValue: 0.0525, strengthUnit: 'MG/HR' }, \n  { drugCode: 388508, drugName: '72 HR Buprenorphine 0.035 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.035 MG/HR', strengthValue: 0.035, strengthUnit: 'MG/HR' }, \n  { drugCode: 577057, drugName: '72 HR Fentanyl 0.012 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.012 MG/HR', strengthValue: 0.012, strengthUnit: 'MG/HR' }, \n  { drugCode: 583490, drugName: '72 HR Fentanyl 0.012 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.012 MG/HR', strengthValue: 0.012, strengthUnit: 'MG/HR' }, \n  { drugCode: 637540, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.5 MG / oxycodone terephthalate 0.38 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.5 MG', strengthValue: 4.5, strengthUnit: 'MG' }, \n  { drugCode: 637540, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.5 MG / oxycodone terephthalate 0.38 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '0.38 MG', strengthValue: 0.38, strengthUnit: 'MG' }, \n  { drugCode: 668363, drugName: 'Fentanyl 0.1 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' }, \n  { drugCode: 668364, drugName: 'Fentanyl 0.2 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 668365, drugName: 'Fentanyl 0.4 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 668366, drugName: 'Fentanyl 0.6 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 668367, drugName: 'Fentanyl 0.8 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' }, \n  { drugCode: 668622, drugName: 'Fentanyl 0.1 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' }, \n  { drugCode: 668624, drugName: 'Fentanyl 0.2 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 668626, drugName: 'Fentanyl 0.4 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 668628, drugName: 'Fentanyl 0.6 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 668630, drugName: 'Fentanyl 0.8 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' }, \n  { drugCode: 706898, drugName: 'Fentanyl 0.3 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' }, \n  { drugCode: 724614, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 2.25 MG / oxycodone terephthalate 0.19 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '0.19 MG', strengthValue: 0.19, strengthUnit: 'MG' }, \n  { drugCode: 724614, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 2.25 MG / oxycodone terephthalate 0.19 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.25 MG', strengthValue: 2.25, strengthUnit: 'MG' }, \n  { drugCode: 727759, drugName: '2 ML Fentanyl 0.05 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 825409, drugName: 'tapentadol 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 825411, drugName: 'tapentadol 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 825413, drugName: 'tapentadol 75 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' }, \n  { drugCode: 827748, drugName: 'propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 827750, drugName: 'propoxyphene napsylate 100 MG Oral Tablet [Darvon-N]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 827751, drugName: 'Acetaminophen 325 MG / propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 828576, drugName: 'Acetaminophen 650 MG / propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 828581, drugName: 'Acetaminophen 650 MG / Propoxyphene Hydrochloride 65 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '65 MG', strengthValue: 65.0, strengthUnit: 'MG' }, \n  { drugCode: 828585, drugName: 'Aspirin 389 MG / Caffeine 32.4 MG / Propoxyphene Hydrochloride 32 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' }, \n  { drugCode: 828594, drugName: 'Aspirin 389 MG / Caffeine 32.4 MG / Propoxyphene Hydrochloride 65 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '65 MG', strengthValue: 65.0, strengthUnit: 'MG' }, \n  { drugCode: 833036, drugName: 'Acetaminophen 750 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 833709, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 833710, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet [Ryzolt]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 833711, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 833712, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet [Ryzolt]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 833713, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' }, \n  { drugCode: 833714, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet [Ryzolt]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' }, \n  { drugCode: 835603, drugName: 'tramadol hydrochloride 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 835605, drugName: 'tramadol hydrochloride 50 MG Oral Tablet [Ultram]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 836395, drugName: 'Acetaminophen 325 MG / tramadol hydrochloride 37.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '37.5 MG', strengthValue: 37.5, strengthUnit: 'MG' }, \n  { drugCode: 836397, drugName: 'Acetaminophen 325 MG / tramadol hydrochloride 37.5 MG Oral Tablet [Ultracet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '37.5 MG', strengthValue: 37.5, strengthUnit: 'MG' }, \n  { drugCode: 836408, drugName: 'tramadol hydrochloride 50 MG Disintegrating Oral Tablet', doseFormCode: 316942, doseFormName: 'Disintegrating Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 836466, drugName: 'tramadol hydrochloride 50 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 836485, drugName: 'tramadol hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 845314, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet [Ultram]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 845315, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet [Ultram]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 845316, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet [Ultram]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' }, \n  { drugCode: 848768, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.84 MG', strengthValue: 4.84, strengthUnit: 'MG' }, \n  { drugCode: 848772, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet [Percodan Reformulated May 2009]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.84 MG', strengthValue: 4.84, strengthUnit: 'MG' }, \n  { drugCode: 848928, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet [Endodan Reformulated May 2009]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.84 MG', strengthValue: 4.84, strengthUnit: 'MG' }, \n  { drugCode: 849279, drugName: 'Propoxyphene Hydrochloride 65 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '65 MG', strengthValue: 65.0, strengthUnit: 'MG' }, \n  { drugCode: 849293, drugName: 'Acetaminophen 325 MG / Propoxyphene Hydrochloride 32.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '32.5 MG', strengthValue: 32.5, strengthUnit: 'MG' }, \n  { drugCode: 849295, drugName: 'Acetaminophen 325 MG / propoxyphene napsylate 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 849303, drugName: 'Acetaminophen 500 MG / propoxyphene napsylate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 849304, drugName: 'Acetaminophen 500 MG / propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 849306, drugName: 'Acetaminophen 65 MG/ML / Propoxyphene Hydrochloride 6.5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '6.5 MG/ML', strengthValue: 6.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 849329, drugName: 'tramadol hydrochloride 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 849331, drugName: 'tramadol hydrochloride 75 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' }, \n  { drugCode: 849455, drugName: 'Propoxyphene Hydrochloride 100 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 849563, drugName: '24 HR tramadol hydrochloride 150 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' }, \n  { drugCode: 849564, drugName: '24 HR tramadol hydrochloride 400 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '400 MG', strengthValue: 400.0, strengthUnit: 'MG' }, \n  { drugCode: 849903, drugName: 'tramadol hydrochloride 50 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 854140, drugName: 'tapentadol 100 MG Oral Tablet [Nucynta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 854142, drugName: 'tapentadol 50 MG Oral Tablet [Nucynta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 854144, drugName: 'tapentadol 75 MG Oral Tablet [Nucynta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' }, \n  { drugCode: 856892, drugName: 'Acetaminophen 750 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 856894, drugName: 'Acetaminophen 750 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Maxidone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 856903, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 856907, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 856908, drugName: 'Acetaminophen 660 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 856940, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 856942, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Hycet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 856944, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.67 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.67 MG/ML', strengthValue: 0.67, strengthUnit: 'MG/ML' }, \n  { drugCode: 856946, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.67 MG/ML Oral Solution [Zamicet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.67 MG/ML', strengthValue: 0.67, strengthUnit: 'MG/ML' }, \n  { drugCode: 856962, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 856980, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 856984, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 856987, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 856991, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 856992, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 856996, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 856999, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 857001, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Norco]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 857002, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 857004, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Norco]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 857005, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 857007, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Norco]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 857076, drugName: 'Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.333 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.333 MG/ML', strengthValue: 0.333, strengthUnit: 'MG/ML' }, \n  { drugCode: 857083, drugName: 'Acetaminophen 650 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 857099, drugName: 'Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 857105, drugName: 'Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Lortab]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 857107, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 857111, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 857113, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 857118, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 857120, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 857121, drugName: 'Aspirin 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 857128, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 857131, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 857134, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 857136, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Zydone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 857237, drugName: 'Pentazocine 30 MG/ML Injectable Solution [Talwin]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 857370, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Hy-Phen]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 857383, drugName: 'Acetaminophen 650 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 857391, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 857501, drugName: 'Acetaminophen 556 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 857510, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 4 MG / HYDROCODONE POLISTIREX 5 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 857512, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 8 MG / HYDROCODONE POLISTIREX 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 857556, drugName: 'Brompheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.34 MG/ML / Pseudoephedrine 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.34 MG/ML', strengthValue: 0.34, strengthUnit: 'MG/ML' }, \n  { drugCode: 857575, drugName: 'Brompheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.34 MG/ML / Pseudoephedrine 6 MG/ML Oral Solution [Bromplex HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.34 MG/ML', strengthValue: 0.34, strengthUnit: 'MG/ML' }, \n  { drugCode: 857734, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' }, \n  { drugCode: 857830, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Triant-HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' }, \n  { drugCode: 857839, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 857845, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Hydro-PC II]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 857851, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 858087, drugName: 'Fentanyl 1.2 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.2 MG', strengthValue: 1.2, strengthUnit: 'MG' }, \n  { drugCode: 858092, drugName: 'Fentanyl 0.2 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 858095, drugName: 'Fentanyl 0.4 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 858098, drugName: 'Fentanyl 0.6 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 858101, drugName: 'Fentanyl 0.8 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' }, \n  { drugCode: 858770, drugName: 'Hydrocodone Bitartrate 2.5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 858772, drugName: 'Hydrocodone Bitartrate 2.5 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 858778, drugName: 'Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 858780, drugName: 'Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet [Ibudone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 858784, drugName: 'Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 858798, drugName: 'Hydrocodone Bitartrate 7.5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 858838, drugName: 'Hydrocodone Bitartrate 7.5 MG / Ibuprofen 200 MG Oral Tablet [Vicoprofen]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 858876, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 858878, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [De-Chlor HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 858937, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Hyphed]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 858939, drugName: 'guaiacolsulfonate 24 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 858945, drugName: 'guaiacolsulfonate 24 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Hydron EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 858953, drugName: 'guaiacolsulfonate 30 MG/ML / Hydrocodone Bitartrate 0.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 858967, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.9 MG/ML', strengthValue: 0.9, strengthUnit: 'MG/ML' }, \n  { drugCode: 858969, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution [Hy-KXP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.9 MG/ML', strengthValue: 0.9, strengthUnit: 'MG/ML' }, \n  { drugCode: 858976, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution [Prolex DH]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.9 MG/ML', strengthValue: 0.9, strengthUnit: 'MG/ML' }, \n  { drugCode: 858991, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859003, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859005, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [S-T Forte 2]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859019, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Hydron KGS]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859027, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' }, \n  { drugCode: 859029, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Hydro-PC II]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' }, \n  { drugCode: 859097, drugName: 'guaiacolsulfonate 70 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859099, drugName: 'guaiacolsulfonate 70 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [KGS HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859137, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859141, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution [B-Tuss]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859143, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Drotuss CP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859146, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859150, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Hydron CP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859156, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859162, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' }, \n  { drugCode: 859164, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Poly-Tussin]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' }, \n  { drugCode: 859220, drugName: 'Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine 1.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' }, \n  { drugCode: 859222, drugName: 'Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine 1.6 MG/ML Oral Solution [Relasin HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' }, \n  { drugCode: 859247, drugName: 'Chlorpheniramine 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 859315, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 859317, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Ibudone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 859327, drugName: 'Guaifenesin 30 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859329, drugName: 'Guaifenesin 30 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.2 MG/ML Oral Solution [Hydrofed]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859331, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 859366, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859368, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Nariz HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859376, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Nazarin HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859383, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859939, drugName: 'Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859941, drugName: 'Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Exetuss HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 859943, drugName: 'Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Simuc-HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 860138, drugName: 'guaiacolsulfonate 30 MG/ML / Hydrocodone Bitartrate 0.6 MG/ML Oral Solution [De-Chlor NX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 860151, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 860159, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 1 MG/ML Oral Solution [De-Chlor MR]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 860239, drugName: 'Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [Hydro GP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 860426, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 860446, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Drituss HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 860530, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Su-Tuss HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 860579, drugName: 'Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.75 MG/ML / Pseudoephedrine 4.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.75 MG/ML', strengthValue: 0.75, strengthUnit: 'MG/ML' }, \n  { drugCode: 860593, drugName: 'Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' }, \n  { drugCode: 860599, drugName: 'Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 860792, drugName: '1 ML Meperidine Hydrochloride 75 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG/ML', strengthValue: 75.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861447, drugName: 'Meperidine Hydrochloride 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861455, drugName: 'Meperidine Hydrochloride 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 861459, drugName: 'Meperidine Hydrochloride 100 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861463, drugName: 'Meperidine Hydrochloride 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861467, drugName: 'Meperidine Hydrochloride 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 861473, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861476, drugName: '1 ML Meperidine Hydrochloride 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861479, drugName: 'Meperidine Hydrochloride 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861482, drugName: '1 ML Meperidine Hydrochloride 75 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG/ML', strengthValue: 75.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861493, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861494, drugName: '1 ML Meperidine Hydrochloride 25 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861517, drugName: 'Meperidine Hydrochloride 100 MG Oral Tablet [Demerol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 861520, drugName: 'Meperidine Hydrochloride 100 MG/ML Injectable Solution [Demerol]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861522, drugName: 'Meperidine Hydrochloride 50 MG/ML Injectable Solution [Demerol]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861525, drugName: 'Meperidine Hydrochloride 50 MG Oral Tablet [Demerol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 861529, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 861578, drugName: 'Meperidine Hydrochloride 50 MG / Promethazine Hydrochloride 25 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 861617, drugName: '1 ML Meperidine Hydrochloride 75 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG/ML', strengthValue: 75.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 863845, drugName: 'Abuse-Deterrent Morphine Sulfate 100 MG / Naltrexone hydrochloride 4 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 863847, drugName: 'Abuse-Deterrent Morphine Sulfate 100 MG / Naltrexone hydrochloride 4 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 863848, drugName: 'Abuse-Deterrent Morphine Sulfate 20 MG / Naltrexone hydrochloride 0.8 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 863849, drugName: 'Abuse-Deterrent Morphine Sulfate 20 MG / Naltrexone hydrochloride 0.8 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 863850, drugName: 'Abuse-Deterrent Morphine Sulfate 30 MG / Naltrexone hydrochloride 1.2 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 863851, drugName: 'Abuse-Deterrent Morphine Sulfate 30 MG / Naltrexone hydrochloride 1.2 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 863852, drugName: 'Abuse-Deterrent Morphine Sulfate 50 MG / Naltrexone hydrochloride 2 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 863853, drugName: 'Abuse-Deterrent Morphine Sulfate 50 MG / Naltrexone hydrochloride 2 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 863854, drugName: 'Abuse-Deterrent Morphine Sulfate 60 MG / Naltrexone hydrochloride 2.4 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 863855, drugName: 'Abuse-Deterrent Morphine Sulfate 60 MG / Naltrexone hydrochloride 2.4 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 863856, drugName: 'Abuse-Deterrent Morphine Sulfate 80 MG / Naltrexone hydrochloride 3.2 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 863857, drugName: 'Abuse-Deterrent Morphine Sulfate 80 MG / Naltrexone hydrochloride 3.2 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 864706, drugName: 'Methadone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 864708, drugName: 'Methadone Hydrochloride 10 MG Oral Tablet [Dolophine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 864712, drugName: 'Methadone Hydrochloride 10 MG Oral Tablet [Methadose]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 864714, drugName: 'Methadone Hydrochloride 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 864718, drugName: 'Methadone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 864720, drugName: 'Methadone Hydrochloride 5 MG Oral Tablet [Dolophine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 864737, drugName: 'Methadone Hydrochloride 5 MG Oral Tablet [Methadose]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 864751, drugName: 'Methadone Hydrochloride 0.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 864761, drugName: 'Methadone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 864769, drugName: 'Methadone Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 864794, drugName: 'Methadone Hydrochloride 25 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 864828, drugName: 'Methadone Hydrochloride 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 864978, drugName: 'Methadone Hydrochloride 40 MG Tablet for Oral Suspension', doseFormCode: 1861409, doseFormName: 'Tablet for Oral Suspension', ingredientCode: 6813, ingredientName: 'Methadone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 864980, drugName: 'Methadone Hydrochloride 40 MG Tablet for Oral Suspension [Methadose]', doseFormCode: 1861409, doseFormName: 'Tablet for Oral Suspension', ingredientCode: 6813, ingredientName: 'Methadone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 864984, drugName: 'Methadone Hydrochloride 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 886622, drugName: 'Butorphanol Tartrate 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 886627, drugName: '1 ML Butorphanol Tartrate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 886634, drugName: 'Butorphanol Tartrate 10 MG/ML Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 891172, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 2 MG/ML Oral Solution [De-Chlor G]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 891874, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 891878, drugName: '12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 891881, drugName: 'Morphine Sulfate 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 891883, drugName: '12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 891885, drugName: '12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 891888, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 891890, drugName: '12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 891893, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 892297, drugName: '24 HR Morphine Sulfate 120 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' }, \n  { drugCode: 892299, drugName: '24 HR Morphine Sulfate 120 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' }, \n  { drugCode: 892342, drugName: '24 HR Morphine Sulfate 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 892344, drugName: '24 HR Morphine Sulfate 30 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 892345, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 892349, drugName: '24 HR Morphine Sulfate 60 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 892351, drugName: '24 HR Morphine Sulfate 60 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 892352, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 892355, drugName: '24 HR Morphine Sulfate 90 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '90 MG', strengthValue: 90.0, strengthUnit: 'MG' }, \n  { drugCode: 892357, drugName: '24 HR Morphine Sulfate 90 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '90 MG', strengthValue: 90.0, strengthUnit: 'MG' }, \n  { drugCode: 892473, drugName: '10 ML Morphine Sulfate 0.5 MG/ML Injection [Duramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 892489, drugName: '10 ML Morphine Sulfate 1 MG/ML Injection [Duramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 892494, drugName: 'Morphine Sulfate 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 892496, drugName: 'Morphine Sulfate 10 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 892516, drugName: 'Morphine Sulfate 10 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 892531, drugName: 'Morphine Sulfate 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 892554, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 892556, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 892560, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 892574, drugName: 'Morphine Sulfate 15 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 892579, drugName: 'Morphine Sulfate 15 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 892582, drugName: 'Morphine Sulfate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 892589, drugName: 'Morphine Sulfate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 892596, drugName: 'Morphine Sulfate 20 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 892598, drugName: 'Morphine Sulfate 20 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 892603, drugName: 'Morphine Sulfate 20 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 892625, drugName: 'Morphine Sulfate 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 892643, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 892645, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 892646, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 892648, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 892652, drugName: '20 ML Morphine Sulfate 25 MG/ML Injection [Infumorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 892658, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 892660, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 892669, drugName: 'Morphine Sulfate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 892672, drugName: 'Morphine Sulfate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 892678, drugName: 'Morphine Sulfate 30 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 894780, drugName: 'Morphine Sulfate 4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 894801, drugName: 'Morphine Sulfate 50 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 894803, drugName: 'Morphine Sulfate 50 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 894805, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 894807, drugName: 'Morphine Sulfate 5 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 894813, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 894814, drugName: 'Morphine Sulfate 80 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 894816, drugName: 'Morphine Sulfate 80 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 894911, drugName: '0.7 ML Morphine Sulfate 14.3 MG/ML Auto-Injector', doseFormCode: 1649570, doseFormName: 'Auto-Injector', ingredientCode: 7052, ingredientName: 'Morphine', strength: '14.3 MG/ML', strengthValue: 14.3, strengthUnit: 'MG/ML' }, \n  { drugCode: 894912, drugName: '1 ML Morphine Sulfate 10 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 894914, drugName: '1 ML Morphine Sulfate 8 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '8 MG/ML', strengthValue: 8.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 894918, drugName: '12 HR Morphine Sulfate 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 894933, drugName: 'Morphine Sulfate 150 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' }, \n  { drugCode: 894942, drugName: '24 HR Morphine Sulfate 45 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '45 MG', strengthValue: 45.0, strengthUnit: 'MG' }, \n  { drugCode: 894970, drugName: '24 HR Morphine Sulfate 75 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' }, \n  { drugCode: 894986, drugName: 'Morphine Sulfate 0.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 895014, drugName: 'Morphine Sulfate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 895016, drugName: 'Morphine Sulfate 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895022, drugName: 'Morphine Sulfate 100 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 895185, drugName: 'Morphine Sulfate 15 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 895194, drugName: 'Morphine Sulfate 15 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895199, drugName: 'Morphine Sulfate 2 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895201, drugName: 'Morphine Sulfate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 895202, drugName: 'Morphine Sulfate 20 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895206, drugName: 'Morphine Sulfate 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 895208, drugName: 'Morphine Sulfate 3 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '3 MG/ML', strengthValue: 3.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895213, drugName: 'Morphine Sulfate 30 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895215, drugName: 'Morphine Sulfate 35 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '35 MG', strengthValue: 35.0, strengthUnit: 'MG' }, \n  { drugCode: 895217, drugName: 'Morphine Sulfate 5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 895219, drugName: 'Morphine Sulfate 5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895221, drugName: 'Morphine Sulfate 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 895227, drugName: 'Morphine Sulfate 50 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 895233, drugName: 'Morphine Sulfate 6 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '6 MG/ML', strengthValue: 6.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895238, drugName: 'Morphine Sulfate 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '6 MG/ML', strengthValue: 6.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 895240, drugName: 'Morphine Sulfate 6.67 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '6.67 MG/ML', strengthValue: 6.67, strengthUnit: 'MG/ML' }, \n  { drugCode: 895247, drugName: 'Morphine Sulfate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 895248, drugName: 'Morphine Sulfate 75 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' }, \n  { drugCode: 895861, drugName: 'Morphine Sulfate 25 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' }, \n  { drugCode: 895867, drugName: 'Morphine hydrochloride 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 895869, drugName: 'Morphine Sulfate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 895871, drugName: 'Morphine Sulfate 50 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897653, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897655, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897657, drugName: 'Hydromorphone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897658, drugName: 'Hydromorphone Hydrochloride 1 MG/ML Oral Solution [Dilaudid]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897677, drugName: '24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' }, \n  { drugCode: 897687, drugName: '24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 897696, drugName: 'Hydromorphone Hydrochloride 2 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 897698, drugName: 'Hydromorphone Hydrochloride 2 MG Oral Tablet [Dilaudid]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 897702, drugName: 'Hydromorphone Hydrochloride 4 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' }, \n  { drugCode: 897704, drugName: 'Hydromorphone Hydrochloride 4 MG Oral Tablet [Dilaudid]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' }, \n  { drugCode: 897710, drugName: 'Hydromorphone Hydrochloride 8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 897712, drugName: 'Hydromorphone Hydrochloride 8 MG Oral Tablet [Dilaudid]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 897730, drugName: '24 HR Hydromorphone Hydrochloride 24 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '24 MG', strengthValue: 24.0, strengthUnit: 'MG' }, \n  { drugCode: 897737, drugName: '24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' }, \n  { drugCode: 897745, drugName: 'Hydromorphone Hydrochloride 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897747, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897749, drugName: 'Hydromorphone Hydrochloride 3 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '3 MG', strengthValue: 3.0, strengthUnit: 'MG' }, \n  { drugCode: 897753, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897755, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897756, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897757, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897758, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 897771, drugName: 'Hydromorphone Hydrochloride 1 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG', strengthValue: 1.0, strengthUnit: 'MG' }, \n  { drugCode: 898004, drugName: 'Hydromorphone Hydrochloride 1.3 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1.3 MG', strengthValue: 1.3, strengthUnit: 'MG' }, \n  { drugCode: 898138, drugName: 'Hydromorphone Hydrochloride 2.6 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2.6 MG', strengthValue: 2.6, strengthUnit: 'MG' }, \n  { drugCode: 898139, drugName: 'Hydromorphone Hydrochloride 3 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '3 MG', strengthValue: 3.0, strengthUnit: 'MG' }, \n  { drugCode: 898612, drugName: '12 HR Hydromorphone Hydrochloride 3 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '3 MG', strengthValue: 3.0, strengthUnit: 'MG' }, \n  { drugCode: 898624, drugName: 'Hydromorphone Hydrochloride 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 899125, drugName: 'Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 2.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' }, \n  { drugCode: 902729, drugName: '24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' }, \n  { drugCode: 902733, drugName: '24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' }, \n  { drugCode: 902736, drugName: '24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 902738, drugName: '24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 902741, drugName: '24 HR Hydromorphone Hydrochloride 8 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 902743, drugName: '24 HR Hydromorphone Hydrochloride 8 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 904870, drugName: '168 HR Buprenorphine 0.01 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.01 MG/HR', strengthValue: 0.01, strengthUnit: 'MG/HR' }, \n  { drugCode: 904874, drugName: '168 HR Buprenorphine 0.01 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.01 MG/HR', strengthValue: 0.01, strengthUnit: 'MG/HR' }, \n  { drugCode: 904876, drugName: '168 HR Buprenorphine 0.02 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.02 MG/HR', strengthValue: 0.02, strengthUnit: 'MG/HR' }, \n  { drugCode: 904878, drugName: '168 HR Buprenorphine 0.02 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.02 MG/HR', strengthValue: 0.02, strengthUnit: 'MG/HR' }, \n  { drugCode: 904880, drugName: '168 HR Buprenorphine 0.005 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.005 MG/HR', strengthValue: 0.005, strengthUnit: 'MG/HR' }, \n  { drugCode: 904882, drugName: '168 HR Buprenorphine 0.005 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.005 MG/HR', strengthValue: 0.005, strengthUnit: 'MG/HR' }, \n  { drugCode: 977874, drugName: '12 HR Oxymorphone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 977876, drugName: '12 HR Oxymorphone Hydrochloride 10 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 977894, drugName: '12 HR Oxymorphone Hydrochloride 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 977896, drugName: '12 HR Oxymorphone Hydrochloride 15 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 977902, drugName: '12 HR Oxymorphone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 977904, drugName: '12 HR Oxymorphone Hydrochloride 20 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 977909, drugName: '12 HR Oxymorphone Hydrochloride 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 977911, drugName: '12 HR Oxymorphone Hydrochloride 30 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 977915, drugName: '12 HR Oxymorphone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 977917, drugName: '12 HR Oxymorphone Hydrochloride 40 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 977923, drugName: '12 HR Oxymorphone Hydrochloride 5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 977925, drugName: '12 HR Oxymorphone Hydrochloride 5 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 977929, drugName: '12 HR Oxymorphone Hydrochloride 7.5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 977931, drugName: '12 HR Oxymorphone Hydrochloride 7.5 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 977935, drugName: '1 ML Oxymorphone Hydrochloride 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 977937, drugName: '1 ML Oxymorphone Hydrochloride 1 MG/ML Injection [Opana]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 977939, drugName: 'Oxymorphone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 977940, drugName: 'Oxymorphone Hydrochloride 5 MG Oral Tablet [Opana]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 977942, drugName: 'Oxymorphone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 977943, drugName: 'Oxymorphone Hydrochloride 10 MG Oral Tablet [Opana]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 977971, drugName: 'Oxymorphone Hydrochloride 1.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 977974, drugName: 'Oxymorphone Hydrochloride 5 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 991147, drugName: 'Methadone Hydrochloride 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 991149, drugName: 'Methadone Hydrochloride 10 MG/ML Oral Solution [Methadose]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 991486, drugName: 'Codeine Phosphate 2 MG/ML / Promethazine Hydrochloride 1.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 992656, drugName: 'homatropine methylbromide 1.5 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 992668, drugName: 'homatropine methylbromide 0.3 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 992675, drugName: 'homatropine methylbromide 0.3 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Hydromet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 992733, drugName: 'homatropine methylbromide 1.5 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Tussigon]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 993755, drugName: 'Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2.4 MG/ML', strengthValue: 2.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 993763, drugName: 'Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2.4 MG/ML', strengthValue: 2.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 993767, drugName: 'Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Suspension [Capital and Codeine]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2.4 MG/ML', strengthValue: 2.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 993770, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 993781, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 993837, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 30 MG Oral Tablet [Tylenol with Codeine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 993890, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 993892, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 60 MG Oral Tablet [Tylenol with Codeine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 993924, drugName: 'Acetaminophen 325 MG / Chlorpheniramine 2 MG / Codeine Phosphate 16 MG / Phenylephrine 10 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 993926, drugName: 'Acetaminophen 325 MG / Chlorpheniramine 2 MG / Codeine Phosphate 16 MG / Phenylephrine 10 MG Oral Capsule [Colrex]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 993943, drugName: 'Acetaminophen 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 994043, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 994045, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 15 MG Oral Tablet [Codrix]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 994046, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 994048, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Tablet [Codrix]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 994049, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 994051, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 60 MG Oral Tablet [Codrix]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 994226, drugName: 'Aspirin 325 MG / Carisoprodol 200 MG / Codeine Phosphate 16 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 994228, drugName: 'Aspirin 325 MG / Carisoprodol 200 MG / Codeine Phosphate 16 MG Oral Tablet [Soma Compound with Codeine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 994237, drugName: 'Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 994239, drugName: 'Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Ascomp]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 994277, drugName: 'Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Fiorinal with Codeine]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 994289, drugName: 'Brompheniramine Maleate 0.27 MG/ML / Codeine Phosphate 1.27 MG/ML / Pseudoephedrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.27 MG/ML', strengthValue: 1.27, strengthUnit: 'MG/ML' }, \n  { drugCode: 994402, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 994404, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Mar-cof BP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 995041, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995043, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995062, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995064, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995065, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3.33 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995067, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3.33 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995068, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995070, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995071, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995073, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995075, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 0.375 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995077, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 0.375 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995079, drugName: 'Chlorpheniramine 0.266 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995081, drugName: 'Chlorpheniramine 0.266 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995082, drugName: 'Chlorpheniramine 0.267 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995084, drugName: 'Chlorpheniramine 0.267 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995086, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4.29 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995088, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4.29 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995093, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995095, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995108, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995110, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 5 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995116, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995118, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995120, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 6 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995122, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 6 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995123, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995125, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995128, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1.8 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 995132, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1.8 MG/ML Oral Solution [Z Tuss AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 995211, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995213, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 10 MG Oral Tablet [Cotab A]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995214, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 995216, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 20 MG Oral Tablet [Cotab AX]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 995226, drugName: 'Codeine Phosphate 0.5 MG/ML / Guaifenesin 15 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 995438, drugName: 'Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.26 MG/ML', strengthValue: 1.26, strengthUnit: 'MG/ML' }, \n  { drugCode: 995440, drugName: 'Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution [M-Clear WC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.26 MG/ML', strengthValue: 1.26, strengthUnit: 'MG/ML' }, \n  { drugCode: 995441, drugName: 'Codeine Phosphate 1.5 MG/ML / Guaifenesin 45 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 995443, drugName: 'Codeine Phosphate 1.5 MG/ML / Guaifenesin 45 MG/ML Oral Solution [Mar-cof CG]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 995447, drugName: 'Codeine Phosphate 1.8 MG/ML / Pyrilamine Maleate 1.67 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 995450, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 300 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995453, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Phenylephrine 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995455, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Phenylephrine 10 MG Oral Tablet [Maxiphen CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995476, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995478, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG Oral Tablet [Allfen CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995483, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 40 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995868, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995872, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Cheratussin]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995936, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 300 MG Oral Tablet [Brontex]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 995940, drugName: 'Codeine Phosphate 0.5 MG/ML / Guaifenesin 15 MG/ML Oral Solution [Brontex]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 995956, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Cheracol with Codeine]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995983, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995985, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Biotussin]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 995993, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Cheratussin DAC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996253, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Nucofed Expectorant]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996263, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Phenylhistine Expectorant]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996462, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Guiatuss AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996481, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Mytussin AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996484, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Robafen AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996512, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 60 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996580, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996584, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1 MG/ML Oral Solution [Zotex C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996621, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996623, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [Ala-Hist AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996627, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996629, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution [Notuss PE]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996636, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Pyrilamine Maleate 3 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996640, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996648, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Pseudodine C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996650, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Triacin C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996706, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996708, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Maxiphen CDX]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996710, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996712, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet [Ambifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996714, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996716, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet [Ambifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996718, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996720, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet [Maxifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996722, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996724, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [Maxifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996725, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996727, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG Oral Tablet [Allfen CDX]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996728, drugName: 'Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996730, drugName: 'Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG Oral Capsule [Nucofed]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 996734, drugName: 'Codeine Phosphate 5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996736, drugName: 'Codeine Phosphate 9 MG / Guaifenesin 200 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' }, \n  { drugCode: 996738, drugName: 'Codeine Phosphate 9 MG / Guaifenesin 200 MG Oral Capsule [M-Clear WC]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' }, \n  { drugCode: 996757, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Promethazine Hydrochloride 1.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 996976, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 12.8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '12.8 MG', strengthValue: 12.8, strengthUnit: 'MG' }, \n  { drugCode: 996978, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 13.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '13.5 MG', strengthValue: 13.5, strengthUnit: 'MG' }, \n  { drugCode: 996979, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 996981, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 8 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 996982, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 996983, drugName: 'Acetaminophen 650 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 996988, drugName: 'Aspirin 300 MG / Codeine Phosphate 8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 996991, drugName: 'Aspirin 325 MG / Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 996994, drugName: 'Aspirin 325 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 996998, drugName: 'Brompheniramine Maleate 0.266 MG/ML / Codeine Phosphate 1.27 MG/ML / Phenylephrine Hydrochloride 0.666 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.27 MG/ML', strengthValue: 1.27, strengthUnit: 'MG/ML' }, \n  { drugCode: 997008, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 997014, drugName: 'Codeine Phosphate 0.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 997019, drugName: 'Codeine Phosphate 1 MG/ML / Kaolin 300 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 997160, drugName: 'Codeine Phosphate 1.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1.67 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 997164, drugName: 'Codeine Phosphate 12.5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '12.5 MG', strengthValue: 12.5, strengthUnit: 'MG' }, \n  { drugCode: 997165, drugName: 'Codeine Phosphate 12.8 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '12.8 MG', strengthValue: 12.8, strengthUnit: 'MG' }, \n  { drugCode: 997169, drugName: 'Codeine Phosphate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 997170, drugName: 'Codeine sulfate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 997175, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 997272, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 997280, drugName: 'Codeine Phosphate 20 MG / Ibuprofen 300 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 997284, drugName: 'Codeine Phosphate 3 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '3 MG/ML', strengthValue: 3.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 997285, drugName: 'Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 997287, drugName: 'Codeine sulfate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 997289, drugName: 'Codeine Phosphate 30 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 997296, drugName: 'Codeine sulfate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 997301, drugName: 'Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 997303, drugName: 'Codeine Phosphate 60 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG/ML', strengthValue: 60.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 997398, drugName: 'Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 998212, drugName: '1 ML Morphine Sulfate 2 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 998213, drugName: '1 ML Morphine Sulfate 4 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 999729, drugName: 'Acetaminophen 250 MG / tramadol hydrochloride 50 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 1010600, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 1010603, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 1010604, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 1010606, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 1010608, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Sublingual Tablet [Suboxone]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' }, \n  { drugCode: 1010609, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Sublingual Tablet [Suboxone]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 1014599, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1014615, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1014632, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1037259, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 1042693, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1043650, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Poly Hist NC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1044427, drugName: 'Acetaminophen 20 MG/ML / Hydrocodone Bitartrate 0.667 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.667 MG/ML', strengthValue: 0.667, strengthUnit: 'MG/ML' }, \n  { drugCode: 1049214, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049216, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049221, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049223, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049225, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1049227, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1049233, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1049251, drugName: 'Acetaminophen 400 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049260, drugName: 'Acetaminophen 400 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049267, drugName: 'Acetaminophen 400 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1049270, drugName: 'Acetaminophen 650 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049502, drugName: '12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049504, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049543, drugName: '12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1049545, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1049557, drugName: '12 HR Oxycodone Hydrochloride 160 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '160 MG', strengthValue: 160.0, strengthUnit: 'MG' }, \n  { drugCode: 1049563, drugName: '12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1049565, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1049574, drugName: '12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1049576, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1049580, drugName: 'Acetaminophen 65 MG/ML / Oxycodone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1049582, drugName: 'Acetaminophen 65 MG/ML / Oxycodone Hydrochloride 1 MG/ML Oral Solution [Roxicet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1049584, drugName: '12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1049586, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1049589, drugName: 'Ibuprofen 400 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049593, drugName: '12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1049595, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1049599, drugName: '12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 1049601, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 1049604, drugName: 'Oxycodone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1049611, drugName: 'Oxycodone Hydrochloride 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1049613, drugName: 'Oxycodone Hydrochloride 15 MG Oral Tablet [Roxicodone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1049615, drugName: 'Oxycodone Hydrochloride 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1049618, drugName: 'Oxycodone Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1049620, drugName: 'Oxycodone Hydrochloride 30 MG Oral Tablet [Roxicodone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1049621, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049623, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet [Roxicodone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049625, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049635, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 1049637, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 1049640, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049642, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1049647, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1049650, drugName: 'Acetaminophen 650 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049651, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049655, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Xolox]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049658, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 5 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049683, drugName: 'Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049686, drugName: 'Oxycodone Hydrochloride 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1049691, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049696, drugName: 'Oxycodone Hydrochloride 5 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049709, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1049717, drugName: 'Oxycodone Hydrochloride 10 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1049719, drugName: 'Oxycodone Hydrochloride 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1049720, drugName: 'Oxycodone Hydrochloride 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1049721, drugName: 'Oxycodone Hydrochloride 20 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1049727, drugName: 'Oxycodone Hydrochloride 5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1050409, drugName: 'Oxycodone Hydrochloride 20 MG/ML Oral Solution [Oxyfast]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1050490, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Roxicet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1053647, drugName: 'Fentanyl 0.1 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' }, \n  { drugCode: 1053651, drugName: 'Fentanyl 0.1 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' }, \n  { drugCode: 1053652, drugName: 'Fentanyl 0.2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 1053654, drugName: 'Fentanyl 0.2 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' }, \n  { drugCode: 1053655, drugName: 'Fentanyl 0.3 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' }, \n  { drugCode: 1053657, drugName: 'Fentanyl 0.3 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' }, \n  { drugCode: 1053658, drugName: 'Fentanyl 0.4 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 1053660, drugName: 'Fentanyl 0.4 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' }, \n  { drugCode: 1053661, drugName: 'Fentanyl 0.6 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 1053663, drugName: 'Fentanyl 0.6 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 1053664, drugName: 'Fentanyl 0.8 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' }, \n  { drugCode: 1053666, drugName: 'Fentanyl 0.8 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' }, \n  { drugCode: 1086310, drugName: '24 HR Morphine Sulfate 75 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' }, \n  { drugCode: 1086926, drugName: 'Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Relcof C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.26 MG/ML', strengthValue: 1.26, strengthUnit: 'MG/ML' }, \n  { drugCode: 1087389, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 4 MG / HYDROCODONE POLISTIREX 5 MG Extended Release Oral Capsule [TussiCaps]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1087427, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 8 MG / HYDROCODONE POLISTIREX 10 MG Extended Release Oral Capsule [TussiCaps]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1087459, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 1.6 MG/ML / HYDROCODONE POLISTIREX 2 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1087463, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 1.6 MG/ML / HYDROCODONE POLISTIREX 2 MG/ML Extended Release Suspension [Tussionex]', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088951, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088953, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088963, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.33 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088965, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.33 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088968, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.75 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088970, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.75 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088975, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1088977, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1089021, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.29 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1089023, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.29 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1089025, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1089027, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 5 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1089028, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1089030, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1089055, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1089057, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet [Ambifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1089058, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1089060, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet [Ambifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1089061, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1089063, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet [Maxifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1089070, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1089072, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [Maxifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1098906, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1099711, drugName: 'Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG / Triprolidine Hydrochloride 4 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1112220, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1112224, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Zutripro]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1113048, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1113050, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Notuss-NXD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1113051, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1113053, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution [Notuss-NX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1113313, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet [Oxecta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1113314, drugName: 'Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1113316, drugName: 'Oxycodone Hydrochloride 7.5 MG Oral Tablet [Oxecta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1113417, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1113437, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Phenylhistine DH]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1113998, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114002, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML Oral Solution [Codar AR]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114003, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114026, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114030, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution [Codar GF]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114110, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114334, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114338, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Rezira]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1114878, drugName: 'Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1115573, drugName: 'Fentanyl 0.1 MG/ACTUAT Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1115575, drugName: 'Fentanyl 0.1 MG/ACTUAT Nasal Spray [Lazanda]', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1115577, drugName: 'Fentanyl 0.4 MG/ACTUAT Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1115579, drugName: 'Fentanyl 0.4 MG/ACTUAT Nasal Spray [Lazanda]', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1145972, drugName: 'Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Codar D]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1147395, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1147709, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.5 MG/ML Oral Solution [Lortuss EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1148478, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1148482, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Capsule [ConZip]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1148485, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 1148487, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Capsule [ConZip]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 1148489, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' }, \n  { drugCode: 1148491, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Capsule [ConZip]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' }, \n  { drugCode: 1148797, drugName: '12 HR tapentadol 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1148800, drugName: '12 HR tapentadol 150 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' }, \n  { drugCode: 1148803, drugName: '12 HR tapentadol 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 1148807, drugName: '12 HR tapentadol 250 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' }, \n  { drugCode: 1148809, drugName: '12 HR tapentadol 50 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 1149367, drugName: '12 HR tapentadol 100 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1149370, drugName: '12 HR tapentadol 150 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' }, \n  { drugCode: 1149373, drugName: '12 HR tapentadol 200 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 1149376, drugName: '12 HR tapentadol 250 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' }, \n  { drugCode: 1149378, drugName: '12 HR tapentadol 50 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 1190201, drugName: 'Acetaminophen 320.5 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Trezix]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 1190284, drugName: '24 HR Morphine Sulfate 45 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '45 MG', strengthValue: 45.0, strengthUnit: 'MG' }, \n  { drugCode: 1190580, drugName: 'Codeine Phosphate 1.2 MG/ML / Dexbrompheniramine maleate 0.133 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' }, \n  { drugCode: 1190587, drugName: 'Codeine Phosphate 1.2 MG/ML / Dexbrompheniramine maleate 0.133 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Solution [M-End Max D]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' }, \n  { drugCode: 1190785, drugName: 'Atropine Sulfate 0.6 MG/ML / Morphine Sulfate 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1232113, drugName: '1 ML Morphine Sulfate 15 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1233685, drugName: 'Fentanyl 0.003 MG/ML / Ropivacaine hydrochloride 2.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.003 MG/ML', strengthValue: 0.003, strengthUnit: 'MG/ML' }, \n  { drugCode: 1233686, drugName: 'Fentanyl 0.004 MG/ML / Ropivacaine hydrochloride 1 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.004 MG/ML', strengthValue: 0.004, strengthUnit: 'MG/ML' }, \n  { drugCode: 1233687, drugName: 'Fentanyl 0.004 MG/ML / Ropivacaine hydrochloride 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.004 MG/ML', strengthValue: 0.004, strengthUnit: 'MG/ML' }, \n  { drugCode: 1233700, drugName: 'Hydromorphone Hydrochloride 0.01 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '0.01 MG/ML', strengthValue: 0.01, strengthUnit: 'MG/ML' }, \n  { drugCode: 1234871, drugName: 'Acetaminophen 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 1234872, drugName: 'Aspirin 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 1234941, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / dihydrocodeine bitartrate 0.6 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1234957, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / dihydrocodeine bitartrate 0.6 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [ColdCough PD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1234976, drugName: 'Aspirin 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Synalgos-DC]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 1234978, drugName: 'Acetaminophen 712.8 MG / Caffeine 60 MG / dihydrocodeine bitartrate 32 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' }, \n  { drugCode: 1234990, drugName: 'Acetaminophen 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Trezix]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 1234999, drugName: 'Acetaminophen 500 MG / dihydrocodeine bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1235009, drugName: 'Acetaminophen 500 MG / dihydrocodeine bitartrate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1235011, drugName: 'Acetaminophen 500 MG / dihydrocodeine bitartrate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1235862, drugName: 'Chlorcyclizine hydrochloride 2.5 MG/ML / Codeine Phosphate 1.8 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 1236113, drugName: 'dihydrocodeine bitartrate 1.5 MG/ML / Guaifenesin 10 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1236115, drugName: 'dihydrocodeine bitartrate 1.5 MG/ML / Guaifenesin 10 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution [Poly Tussin EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1236179, drugName: 'dihydrocodeine bitartrate 120 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' }, \n  { drugCode: 1236181, drugName: 'dihydrocodeine bitartrate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1236182, drugName: 'dihydrocodeine bitartrate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1236184, drugName: 'dihydrocodeine bitartrate 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1236186, drugName: 'dihydrocodeine bitartrate 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1236188, drugName: 'dihydrocodeine bitartrate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1236190, drugName: 'dihydrocodeine bitartrate 90 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '90 MG', strengthValue: 90.0, strengthUnit: 'MG' }, \n  { drugCode: 1236239, drugName: 'dihydrocodeine bitartrate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1237050, drugName: 'Fentanyl 0.1 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237055, drugName: 'Fentanyl 0.1 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237057, drugName: 'Fentanyl 0.2 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG/ACTUAT', strengthValue: 0.2, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237059, drugName: 'Fentanyl 0.2 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG/ACTUAT', strengthValue: 0.2, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237060, drugName: 'Fentanyl 0.4 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237062, drugName: 'Fentanyl 0.4 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237064, drugName: 'Fentanyl 0.6 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG/ACTUAT', strengthValue: 0.6, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237066, drugName: 'Fentanyl 0.6 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG/ACTUAT', strengthValue: 0.6, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237068, drugName: 'Fentanyl 0.8 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG/ACTUAT', strengthValue: 0.8, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1237070, drugName: 'Fentanyl 0.8 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG/ACTUAT', strengthValue: 0.8, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1242106, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1242503, drugName: '1 ML Meperidine Hydrochloride 25 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1242558, drugName: 'Chlorcyclizine hydrochloride 2.5 MG/ML / Codeine Phosphate 1.8 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Statuss Green Reformulated Jan 2012]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 1244754, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1244921, drugName: 'Brompheniramine Maleate 0.266 MG/ML / Codeine Phosphate 1.27 MG/ML / Phenylephrine Hydrochloride 0.666 MG/ML Oral Solution [M-End PE]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.27 MG/ML', strengthValue: 1.27, strengthUnit: 'MG/ML' }, \n  { drugCode: 1248039, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Entuss-D Liquid]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1248040, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1248044, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Nalex Expectorant]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1248046, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Vanacon]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1248115, drugName: '24 HR tramadol hydrochloride 150 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' }, \n  { drugCode: 1294356, drugName: 'Bromodiphenhydramine hydrochloride 2.5 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1294380, drugName: 'Diphenhydramine Tannate 5 MG/ML / hydrocodone tannate 0.7 MG/ML / Phenylephrine Tannate 1.5 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' }, \n  { drugCode: 1294382, drugName: 'Diphenhydramine Hydrochloride 2.5 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' }, \n  { drugCode: 1294383, drugName: 'Diphenhydramine Hydrochloride 2.5 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' }, \n  { drugCode: 1297584, drugName: 'Diphenhydramine Tannate 5 MG/ML / hydrocodone tannate 0.7 MG/ML / Phenylephrine Tannate 1.5 MG/ML Extended Release Suspension [Dytan-HC]', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' }, \n  { drugCode: 1297649, drugName: 'Codeine sulfate 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '6 MG/ML', strengthValue: 6.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1302739, drugName: 'Butorphanol 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1302741, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Dolorex Solution]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1303729, drugName: 'Morphine Sulfate 130 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '130 MG', strengthValue: 130.0, strengthUnit: 'MG' }, \n  { drugCode: 1303731, drugName: 'Morphine Sulfate 130 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '130 MG', strengthValue: 130.0, strengthUnit: 'MG' }, \n  { drugCode: 1303733, drugName: 'Morphine Sulfate 150 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' }, \n  { drugCode: 1303736, drugName: 'Morphine Sulfate 40 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1303738, drugName: 'Morphine Sulfate 40 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1303740, drugName: 'Morphine Sulfate 70 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '70 MG', strengthValue: 70.0, strengthUnit: 'MG' }, \n  { drugCode: 1303742, drugName: 'Morphine Sulfate 70 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '70 MG', strengthValue: 70.0, strengthUnit: 'MG' }, \n  { drugCode: 1306898, drugName: '24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' }, \n  { drugCode: 1306900, drugName: '24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' }, \n  { drugCode: 1307056, drugName: 'Buprenorphine 4 MG / Naloxone 1 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' }, \n  { drugCode: 1307058, drugName: 'Buprenorphine 4 MG / Naloxone 1 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' }, \n  { drugCode: 1307061, drugName: 'Buprenorphine 12 MG / Naloxone 3 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' }, \n  { drugCode: 1307063, drugName: 'Buprenorphine 12 MG / Naloxone 3 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' }, \n  { drugCode: 1308438, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1308440, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution [Nalex AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1310202, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1310212, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1310270, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1310927, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Butorphic]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1313294, drugName: 'Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1356315, drugName: 'tapentadol 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1356319, drugName: 'tapentadol 20 MG/ML Oral Solution [Nucynta]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1356797, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1356799, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Brovex PBC]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1356800, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1356802, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG Oral Tablet [BroveX CB]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1356804, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1356806, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Brovex PBC]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1356807, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1356809, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG Oral Tablet [BroveX CB]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1356835, drugName: 'Brompheniramine Maleate 0.6 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1357402, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Phenylpropanolamine Hydrochloride 2.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1357940, drugName: 'Dexchlorpheniramine maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.8 MG/ML', strengthValue: 0.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 1357942, drugName: 'Dexchlorpheniramine maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution [Zotex HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.8 MG/ML', strengthValue: 0.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 1358753, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1366873, drugName: 'Hydrocodone Bitartrate 5 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1366875, drugName: 'Hydrocodone Bitartrate 5 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [P-V-Tussin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1366879, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [P-V-Tussin Syrup]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1368072, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Tusnel C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1372265, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1372873, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Vituz]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1424295, drugName: 'Acetaminophen 325 MG / Chlorpheniramine Maleate 2 MG / Codeine Phosphate 8 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 1424297, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 6 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '6 MG', strengthValue: 6.0, strengthUnit: 'MG' }, \n  { drugCode: 1431076, drugName: 'Buprenorphine 1.4 MG / Naloxone 0.36 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.4 MG', strengthValue: 1.4, strengthUnit: 'MG' }, \n  { drugCode: 1431083, drugName: 'Buprenorphine 1.4 MG / Naloxone 0.36 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.4 MG', strengthValue: 1.4, strengthUnit: 'MG' }, \n  { drugCode: 1431102, drugName: 'Buprenorphine 5.7 MG / Naloxone 1.4 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '5.7 MG', strengthValue: 5.7, strengthUnit: 'MG' }, \n  { drugCode: 1431104, drugName: 'Buprenorphine 5.7 MG / Naloxone 1.4 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '5.7 MG', strengthValue: 5.7, strengthUnit: 'MG' }, \n  { drugCode: 1431286, drugName: 'Acetaminophen 300 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1432969, drugName: '168 HR Buprenorphine 0.015 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.015 MG/HR', strengthValue: 0.015, strengthUnit: 'MG/HR' }, \n  { drugCode: 1432971, drugName: '168 HR Buprenorphine 0.015 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.015 MG/HR', strengthValue: 0.015, strengthUnit: 'MG/HR' }, \n  { drugCode: 1433251, drugName: '0.5 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1433802, drugName: 'Acetaminophen 300 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Fioricet with Codeine]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1440003, drugName: 'Codeine Phosphate 1.8 MG/ML / Dexchlorpheniramine maleate 0.2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 1442445, drugName: 'Acetaminophen 20 MG/ML / Hydrocodone Bitartrate 0.667 MG/ML Oral Solution [Lortab]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.667 MG/ML', strengthValue: 0.667, strengthUnit: 'MG/ML' }, \n  { drugCode: 1442790, drugName: '1 ML Morphine Sulfate 5 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1487288, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 1487611, drugName: 'Fentanyl 50 MG/ML Topical Solution', doseFormCode: 316986, doseFormName: 'Topical Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1487616, drugName: 'Fentanyl 50 MG/ML Topical Solution [Recuvyra]', doseFormCode: 316986, doseFormName: 'Topical Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1488634, drugName: 'Buprenorphine hydrochloride 1.3 MG/ML Injectable Suspension', doseFormCode: 316950, doseFormName: 'Injectable Suspension', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.3 MG/ML', strengthValue: 1.3, strengthUnit: 'MG/ML' }, \n  { drugCode: 1488639, drugName: 'Buprenorphine hydrochloride 1.3 MG/ML Injectable Suspension [Animalgesics]', doseFormCode: 316950, doseFormName: 'Injectable Suspension', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.3 MG/ML', strengthValue: 1.3, strengthUnit: 'MG/ML' }, \n  { drugCode: 1489991, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Torbugesic]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1491832, drugName: '12 HR Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1491834, drugName: '12 HR Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Extended Release Oral Tablet [Xartemis]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1492671, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Lorcet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1492673, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Lorcet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1492675, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lorcet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1495472, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1495474, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1495476, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1535979, drugName: 'Chlorpheniramine Maleate 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine Hydrochloride 1.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' }, \n  { drugCode: 1535981, drugName: 'Chlorpheniramine Maleate 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine Hydrochloride 1.6 MG/ML Oral Solution [Z-Cof HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' }, \n  { drugCode: 1536457, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 8 MG Effervescent Oral Tablet', doseFormCode: 1535727, doseFormName: 'Effervescent Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' }, \n  { drugCode: 1536459, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Effervescent Oral Tablet', doseFormCode: 1535727, doseFormName: 'Effervescent Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1537116, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Primlev]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1537120, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Primlev]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1537122, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Primlev]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1541630, drugName: 'Brompheniramine Maleate 0.8 MG/ML / Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1542390, drugName: 'Buprenorphine 2.1 MG / Naloxone 0.3 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.1 MG', strengthValue: 2.1, strengthUnit: 'MG' }, \n  { drugCode: 1542396, drugName: 'Buprenorphine 2.1 MG / Naloxone 0.3 MG Buccal Film [Bunavail]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.1 MG', strengthValue: 2.1, strengthUnit: 'MG' }, \n  { drugCode: 1542981, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet [Verdrocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' }, \n  { drugCode: 1542988, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Xylon]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1542997, drugName: '168 HR Buprenorphine 0.0075 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.0075 MG/HR', strengthValue: 0.0075, strengthUnit: 'MG/HR' }, \n  { drugCode: 1542999, drugName: '168 HR Buprenorphine 0.0075 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.0075 MG/HR', strengthValue: 0.0075, strengthUnit: 'MG/HR' }, \n  { drugCode: 1544851, drugName: 'Buprenorphine 4.2 MG / Naloxone 0.7 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4.2 MG', strengthValue: 4.2, strengthUnit: 'MG' }, \n  { drugCode: 1544853, drugName: 'Buprenorphine 4.2 MG / Naloxone 0.7 MG Buccal Film [Bunavail]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4.2 MG', strengthValue: 4.2, strengthUnit: 'MG' }, \n  { drugCode: 1544854, drugName: 'Buprenorphine 6.3 MG / Naloxone 1 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '6.3 MG', strengthValue: 6.3, strengthUnit: 'MG' }, \n  { drugCode: 1544856, drugName: 'Buprenorphine 6.3 MG / Naloxone 1 MG Buccal Film [Bunavail]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '6.3 MG', strengthValue: 6.3, strengthUnit: 'MG' }, \n  { drugCode: 1545903, drugName: '12 HR Naloxone Hydrochloride 10 MG / Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1545907, drugName: '12 HR Naloxone Hydrochloride 20 MG / Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1545910, drugName: '12 HR Naloxone Hydrochloride 5 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1546089, drugName: '12 HR Naloxone Hydrochloride 5 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet [Targiniq]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1547607, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Lortuss EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1594650, drugName: 'Buprenorphine 1.8 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 1594655, drugName: 'Buprenorphine 1.8 MG/ML Injectable Solution [Simbadol]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' }, \n  { drugCode: 1595214, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution [Ninjacof XG]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' }, \n  { drugCode: 1595730, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1595736, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1595740, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1595742, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1595746, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1595748, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1595752, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1595754, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 60 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1595758, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 80 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 1595760, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 80 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 1595764, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1595766, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 100 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1595770, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 120 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' }, \n  { drugCode: 1595772, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 120 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' }, \n  { drugCode: 1596108, drugName: 'Acetaminophen 320.5 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 1597568, drugName: 'Buprenorphine 11.4 MG / Naloxone 2.9 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '11.4 MG', strengthValue: 11.4, strengthUnit: 'MG' }, \n  { drugCode: 1597570, drugName: 'Buprenorphine 11.4 MG / Naloxone 2.9 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '11.4 MG', strengthValue: 11.4, strengthUnit: 'MG' }, \n  { drugCode: 1597573, drugName: 'Buprenorphine 8.6 MG / Naloxone 2.1 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8.6 MG', strengthValue: 8.6, strengthUnit: 'MG' }, \n  { drugCode: 1597575, drugName: 'Buprenorphine 8.6 MG / Naloxone 2.1 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8.6 MG', strengthValue: 8.6, strengthUnit: 'MG' }, \n  { drugCode: 1598284, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Obredon]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1603495, drugName: '72 HR Fentanyl 0.0375 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.0375 MG/HR', strengthValue: 0.0375, strengthUnit: 'MG/HR' }, \n  { drugCode: 1603498, drugName: '72 HR Fentanyl 0.0625 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.0625 MG/HR', strengthValue: 0.0625, strengthUnit: 'MG/HR' }, \n  { drugCode: 1603501, drugName: '72 HR Fentanyl 0.0875 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.0875 MG/HR', strengthValue: 0.0875, strengthUnit: 'MG/HR' }, \n  { drugCode: 1650982, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Flowtuss]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1651558, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1651564, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Hycofenix]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1652087, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 0.8 MG/ML / CODEINE POLISTIREX 4 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1652093, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 0.8 MG/ML / CODEINE POLISTIREX 4 MG/ML Extended Release Suspension [Tuzistra]', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1655032, drugName: '1 ML Buprenorphine 0.3 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG/ML', strengthValue: 0.3, strengthUnit: 'MG/ML' }, \n  { drugCode: 1655058, drugName: 'Meperidine Hydrochloride 150 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' }, \n  { drugCode: 1655060, drugName: 'Meperidine Hydrochloride 75 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' }, \n  { drugCode: 1661319, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML / Triprolidine Hydrochloride 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1661325, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML / Triprolidine Hydrochloride 0.5 MG/ML Oral Solution [Histex AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1664448, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet [Oxaydo]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1664543, drugName: '12 HR Chlorpheniramine Maleate 8 MG / Codeine Phosphate 54.3 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '54.3 MG', strengthValue: 54.3, strengthUnit: 'MG' }, \n  { drugCode: 1664634, drugName: 'Oxycodone Hydrochloride 7.5 MG Oral Tablet [Oxaydo]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' }, \n  { drugCode: 1665685, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665687, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665690, drugName: '1.5 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665691, drugName: '1.5 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665697, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665698, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665699, drugName: '0.5 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665700, drugName: '0.5 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665701, drugName: '2 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1665702, drugName: '2 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1666338, drugName: 'Buprenorphine 2.9 MG / Naloxone 0.71 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.9 MG', strengthValue: 2.9, strengthUnit: 'MG' }, \n  { drugCode: 1666385, drugName: 'Buprenorphine 2.9 MG / Naloxone 0.71 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.9 MG', strengthValue: 2.9, strengthUnit: 'MG' }, \n  { drugCode: 1666831, drugName: 'Fentanyl 0.04 MG Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.04 MG', strengthValue: 0.04, strengthUnit: 'MG' }, \n  { drugCode: 1666837, drugName: 'Fentanyl 0.04 MG Transdermal System [Ionsys]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.04 MG', strengthValue: 0.04, strengthUnit: 'MG' }, \n  { drugCode: 1716057, drugName: 'Buprenorphine 0.15 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.15 MG', strengthValue: 0.15, strengthUnit: 'MG' }, \n  { drugCode: 1716063, drugName: 'Buprenorphine 0.15 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.15 MG', strengthValue: 0.15, strengthUnit: 'MG' }, \n  { drugCode: 1716065, drugName: 'Buprenorphine 0.3 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' }, \n  { drugCode: 1716067, drugName: 'Buprenorphine 0.3 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' }, \n  { drugCode: 1716069, drugName: 'Buprenorphine 0.45 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.45 MG', strengthValue: 0.45, strengthUnit: 'MG' }, \n  { drugCode: 1716071, drugName: 'Buprenorphine 0.45 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.45 MG', strengthValue: 0.45, strengthUnit: 'MG' }, \n  { drugCode: 1716073, drugName: 'Buprenorphine 0.6 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 1716075, drugName: 'Buprenorphine 0.6 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' }, \n  { drugCode: 1716077, drugName: 'Buprenorphine 0.075 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.075 MG', strengthValue: 0.075, strengthUnit: 'MG' }, \n  { drugCode: 1716079, drugName: 'Buprenorphine 0.075 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.075 MG', strengthValue: 0.075, strengthUnit: 'MG' }, \n  { drugCode: 1716081, drugName: 'Buprenorphine 0.75 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.75 MG', strengthValue: 0.75, strengthUnit: 'MG' }, \n  { drugCode: 1716083, drugName: 'Buprenorphine 0.75 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.75 MG', strengthValue: 0.75, strengthUnit: 'MG' }, \n  { drugCode: 1716086, drugName: 'Buprenorphine 0.9 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.9 MG', strengthValue: 0.9, strengthUnit: 'MG' }, \n  { drugCode: 1716090, drugName: 'Buprenorphine 0.9 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.9 MG', strengthValue: 0.9, strengthUnit: 'MG' }, \n  { drugCode: 1724276, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724338, drugName: '1 ML Hydromorphone Hydrochloride 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724340, drugName: '5 ML Hydromorphone Hydrochloride 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724341, drugName: '50 ML Hydromorphone Hydrochloride 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724352, drugName: 'Hydromorphone Hydrochloride 250 MG Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' }, \n  { drugCode: 1724354, drugName: 'Hydromorphone Hydrochloride 250 MG Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' }, \n  { drugCode: 1724356, drugName: '1 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724358, drugName: '5 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724359, drugName: '50 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724383, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1724644, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728351, drugName: '1 ML Butorphanol Tartrate 2 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728355, drugName: '2 ML Butorphanol Tartrate 2 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728783, drugName: '10 ML Morphine Sulfate 0.5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728784, drugName: '10 ML Morphine Sulfate 0.5 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728789, drugName: '30 ML Morphine Sulfate 0.5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728791, drugName: '2 ML Morphine Sulfate 0.5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728792, drugName: '2 ML Morphine Sulfate 0.5 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728800, drugName: '10 ML Morphine Sulfate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728801, drugName: '10 ML Morphine Sulfate 1 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728805, drugName: '2 ML Morphine Sulfate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728806, drugName: '2 ML Morphine Sulfate 1 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1728999, drugName: '30 ML Morphine Sulfate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1729197, drugName: '1 ML Morphine Sulfate 2 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1729320, drugName: 'Fentanyl 0.3 MG/ACTUAT Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG/ACTUAT', strengthValue: 0.3, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1729322, drugName: 'Fentanyl 0.3 MG/ACTUAT Nasal Spray [Lazanda]', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG/ACTUAT', strengthValue: 0.3, strengthUnit: 'MG/ACTUAT' }, \n  { drugCode: 1731517, drugName: '10 ML Morphine Sulfate 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731520, drugName: '4 ML Morphine Sulfate 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731522, drugName: '20 ML Morphine Sulfate 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731530, drugName: '1 ML Morphine Sulfate 15 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731537, drugName: '20 ML Morphine Sulfate 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731545, drugName: '50 ML Morphine Sulfate 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731993, drugName: '1 ML Morphine Sulfate 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731995, drugName: '1 ML Morphine Sulfate 10 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731998, drugName: '20 ML Morphine Sulfate 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1731999, drugName: '20 ML Morphine Sulfate 10 MG/ML Injection [Infumorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1732003, drugName: '1 ML Morphine Sulfate 8 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '8 MG/ML', strengthValue: 8.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1732006, drugName: '1 ML Morphine Sulfate 4 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1732011, drugName: '1 ML Morphine Sulfate 8 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '8 MG/ML', strengthValue: 8.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1732014, drugName: '1 ML Morphine Sulfate 4 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1732136, drugName: '1 ML Morphine Sulfate 5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1732138, drugName: '30 ML Morphine Sulfate 5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1733080, drugName: '1 ML Morphine Sulfate 15 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735003, drugName: '2 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735006, drugName: '10 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735007, drugName: '5 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735008, drugName: '20 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735013, drugName: '50 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735057, drugName: '2 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735060, drugName: '5 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735062, drugName: '20 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1735065, drugName: '10 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' }, \n  { drugCode: 1745881, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1745886, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1745889, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1745892, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1790527, drugName: 'Abuse-Deterrent 12 HR Oxycodone 9 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' }, \n  { drugCode: 1790533, drugName: 'Abuse-Deterrent 12 HR Oxycodone 9 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' }, \n  { drugCode: 1791558, drugName: 'Abuse-Deterrent 12 HR Oxycodone 13.5 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '13.5 MG', strengthValue: 13.5, strengthUnit: 'MG' }, \n  { drugCode: 1791560, drugName: 'Abuse-Deterrent 12 HR Oxycodone 13.5 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '13.5 MG', strengthValue: 13.5, strengthUnit: 'MG' }, \n  { drugCode: 1791567, drugName: 'Abuse-Deterrent 12 HR Oxycodone 18 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '18 MG', strengthValue: 18.0, strengthUnit: 'MG' }, \n  { drugCode: 1791569, drugName: 'Abuse-Deterrent 12 HR Oxycodone 18 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '18 MG', strengthValue: 18.0, strengthUnit: 'MG' }, \n  { drugCode: 1791574, drugName: 'Abuse-Deterrent 12 HR Oxycodone 27 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '27 MG', strengthValue: 27.0, strengthUnit: 'MG' }, \n  { drugCode: 1791576, drugName: 'Abuse-Deterrent 12 HR Oxycodone 27 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '27 MG', strengthValue: 27.0, strengthUnit: 'MG' }, \n  { drugCode: 1791580, drugName: 'Abuse-Deterrent 12 HR Oxycodone 36 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '36 MG', strengthValue: 36.0, strengthUnit: 'MG' }, \n  { drugCode: 1791582, drugName: 'Abuse-Deterrent 12 HR Oxycodone 36 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '36 MG', strengthValue: 36.0, strengthUnit: 'MG' }, \n  { drugCode: 1792707, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 40 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1797650, drugName: 'Buprenorphine 74.2 MG Drug Implant', doseFormCode: 657710, doseFormName: 'Drug Implant', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '74.2 MG', strengthValue: 74.2, strengthUnit: 'MG' }, \n  { drugCode: 1797655, drugName: 'Buprenorphine 74.2 MG Drug Implant [Probuphine]', doseFormCode: 657710, doseFormName: 'Drug Implant', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '74.2 MG', strengthValue: 74.2, strengthUnit: 'MG' }, \n  { drugCode: 1806701, drugName: '12 HR Naltrexone hydrochloride 1.2 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1806707, drugName: '12 HR Naltrexone hydrochloride 1.2 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Capsule [Troxyca]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1806710, drugName: '12 HR Naltrexone hydrochloride 2.4 MG / Oxycodone Hydrochloride 20 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1806716, drugName: '12 HR Naltrexone hydrochloride 3.6 MG / Oxycodone Hydrochloride 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1806722, drugName: '12 HR Naltrexone hydrochloride 4.8 MG / Oxycodone Hydrochloride 40 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1806728, drugName: '12 HR Naltrexone hydrochloride 7.2 MG / Oxycodone Hydrochloride 60 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1806734, drugName: '12 HR Naltrexone hydrochloride 9.6 MG / Oxycodone Hydrochloride 80 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 1809204, drugName: 'Butorphanol Tartrate 2 MG/ML Injectable Solution [Torbugesic]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1811473, drugName: '1 ML Pentazocine 30 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1811475, drugName: '1 ML Pentazocine 30 MG/ML Injection [Talwin]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1812164, drugName: 'Acetaminophen 325 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' }, \n  { drugCode: 1860127, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1860129, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1860137, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1860148, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' }, \n  { drugCode: 1860151, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1860154, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1860157, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1860491, drugName: '12 HR Hydrocodone Bitartrate 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1860492, drugName: '12 HR Hydrocodone Bitartrate 10 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' }, \n  { drugCode: 1860493, drugName: '12 HR Hydrocodone Bitartrate 15 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1860494, drugName: '12 HR Hydrocodone Bitartrate 15 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1860495, drugName: '12 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1860496, drugName: '12 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' }, \n  { drugCode: 1860497, drugName: '12 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1860498, drugName: '12 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1860499, drugName: '12 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1860500, drugName: '12 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' }, \n  { drugCode: 1860501, drugName: '12 HR Hydrocodone Bitartrate 50 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 1860502, drugName: '12 HR Hydrocodone Bitartrate 50 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' }, \n  { drugCode: 1864412, drugName: 'Buprenorphine 0.7 MG / Naloxone 0.18 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.7 MG', strengthValue: 0.7, strengthUnit: 'MG' }, \n  { drugCode: 1864414, drugName: 'Buprenorphine 0.7 MG / Naloxone 0.18 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.7 MG', strengthValue: 0.7, strengthUnit: 'MG' }, \n  { drugCode: 1871434, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1871440, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet [Arymo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1871441, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1871443, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet [Arymo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1871444, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1871446, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet [Arymo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' }, \n  { drugCode: 1872234, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1872265, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1872269, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1872271, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1872272, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1872752, drugName: '0.5 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }, \n  { drugCode: 1944529, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1944535, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 15 MG Oral Tablet [Roxybond]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' }, \n  { drugCode: 1944538, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1944540, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 30 MG Oral Tablet [Roxybond]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' }, \n  { drugCode: 1944541, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1944543, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 5 MG Oral Tablet [Roxybond]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' }, \n  { drugCode: 1946525, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' }, \n  { drugCode: 1946527, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' }, \n  { drugCode: 1946529, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' }, \n  { drugCode: 1947138, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Torphaject]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' }\n}\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "version": "1.2.3",
  "name": "OMTKData2018",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}