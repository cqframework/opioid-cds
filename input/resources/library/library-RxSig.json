{
  "resourceType": "Library",
  "id": "library-RxSig",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-RxSig</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library RxSig version '0.1.0'\n\ncontext Population\n\n/*************************************************************************/\n\ndefine public function ParsedFreeTextSIG(SIG String) returns Any:\n    SIG origSig\n    let\n\n        //----------------------------\n        //----------------------------\n        // get normalized sig\n        //----------------------------\n        //----------------------------\n\n        normSig_Argument: origSig,\n\n        // Purge characters that shouldn't appear in any raw SIG,\n        // replace each with a space; we use a whitelist.\n        normSig_FilterByCharWhitelist: ReplaceMatches(normSig_Argument, '[^ 0-9A-Z_a-z,;:!\\\\.\\'\"()@*/&amp;#%+-]', ' '),\n\n        // lower case all\n        normSig_Lowercase: Lower(normSig_FilterByCharWhitelist),\n\n        // ends in ', pain'\n        indication_EarlyStageCheck: if EndsWith(normSig_Lowercase, ', pain') then 'pain' else null,\n        normSig_ChopSfxPain: ReplaceMatches(normSig_Lowercase, ', pain$', ''),\n\n        // remove commas, !, *, :, ;   replace with space\n        normSig_DropMorePunct: ReplaceMatches(normSig_ChopSfxPain, '[,!*:;]', ' '),\n\n        // remove please, the, of, with\n        normSig_DropNoise: ReplaceMatchesAlphaWord(normSig_DropMorePunct, '(?:of|please|the|with)', ''),\n\n        // convert all multi-hyphens to single hyphen\n        normSig_MergeHyphens: ReplaceMatches(normSig_DropNoise, '-( *-)+', '-'),\n\n        // convert \"(s)\" word suffix to \"s\", eg \"tab(s)\"-&gt;\"tabs\"\n        normSig_Plurals: ReplaceMatches(normSig_MergeHyphens, '(?&lt;=[a-z])\\\\(s\\\\)(?![a-z])', 's'),\n\n        //---------------------------\n        // numbers\n        //---------------------------\n        normSig_Numbers11: ReplaceMatchesAlphaWord(normSig_Plurals, 'two and( (a|one))? half', '2.5'),\n        normSig_Numbers12: ReplaceMatchesDigitWord(normSig_Numbers11, '2 (1/2|0.5)', '2.5'),\n        normSig_Numbers21: ReplaceMatchesAlphaWord(normSig_Numbers12, 'one and( (a|one))? half', '1.5'),\n        normSig_Numbers22: ReplaceMatchesDigitWord(normSig_Numbers21, '1 (1/2|0.5)', '1.5'),\n        normSig_Numbers31: ReplaceMatchesAlphaDigitWord(normSig_Numbers22, '(?:one|1)[ -]half', '0.5'),\n        normSig_Numbers32: ReplaceMatchesAlphaWord(normSig_Numbers31, 'half', '0.5'),\n        normSig_Numbers33: ReplaceMatchesDigitWord(normSig_Numbers32, '1/2', '0.5'),\n        normSig_Numbers41: ReplaceMatchesAlphaDigitWord(normSig_Numbers33, '(?:one|1)[ -]fourth', '0.25'),\n        normSig_Numbers51: ReplaceMatchesAlphaWord(normSig_Numbers41, 'one( full)?', '1'),\n        normSig_Numbers52: ReplaceMatchesAlphaWord(normSig_Numbers51, 'two', '2'),\n        normSig_Numbers53: ReplaceMatchesAlphaWord(normSig_Numbers52, 'three', '3'),\n        normSig_Numbers54: ReplaceMatchesAlphaWord(normSig_Numbers53, 'four', '4'),\n        normSig_Numbers55: ReplaceMatchesAlphaWord(normSig_Numbers54, 'five', '5'),\n        normSig_Numbers56: ReplaceMatchesAlphaWord(normSig_Numbers55, 'six', '6'),\n        normSig_Numbers57: ReplaceMatchesAlphaWord(normSig_Numbers56, 'seven', '7'),\n        normSig_Numbers58: ReplaceMatchesAlphaWord(normSig_Numbers57, 'eight', '8'),\n        normSig_Numbers59: ReplaceMatchesAlphaWord(normSig_Numbers58, 'nine', '9'),\n        normSig_Numbers510: ReplaceMatchesAlphaWord(normSig_Numbers59, 'ten', '10'),\n        normSig_Numbers511: ReplaceMatchesAlphaWord(normSig_Numbers510, 'eleven', '11'),\n        normSig_Numbers512: ReplaceMatchesAlphaWord(normSig_Numbers511, 'twelve', '12'),\n        normSig_Numbers61: ReplaceMatchesAlphaWord(normSig_Numbers512, '(\\\\d+) \\\\(\\\\1\\\\)', '$1'),\n\n        normSig_Range: ReplaceMatches(normSig_Numbers61, '(\\\\d+\\\\.?\\\\d*) *(?:to|-|or) *(\\\\d+\\\\.?\\\\d*)','$1-$2'),\n\n        normSig_Frequency1: ReplaceMatchesAlphaWord(normSig_Range, 'times', 'x'),\n        normSig_Frequency2: ReplaceMatchesAlphaWord(normSig_Frequency1, 'once', '1x'),\n        normSig_Frequency3: ReplaceMatchesAlphaWord(normSig_Frequency2, '(?:twice|bid)', '2x'),\n        normSig_Frequency4: ReplaceMatchesAlphaWord(normSig_Frequency3, '(?:thrice|tid)', '3x'),\n        normSig_Frequency5: ReplaceMatchesAlphaWord(normSig_Frequency4, 'qid', '4x'),\n        normSig_Frequency6: ReplaceMatches(normSig_Frequency5, '(\\\\d+) *x', '$1x'),\n        normSig_Frequency7: ReplaceMatches(normSig_Frequency6, '(\\\\d+)x?-(\\\\d+)x','$1-$2x'),\n\n        // clean\n        normSig_Clean1: CleanedStr(normSig_Frequency7),\n\n        // extract out earliest fill dates\n        fillDate_Argument: normSig_Clean1,\n        fillDate_Pattern: '(?:earliest fill date|to be filled on(?: or after)?|(?:ok to|may) fill(?: on)?) +(?&lt;month&gt;\\\\d+)/(?&lt;day&gt;\\\\d+)/(?&lt;year&gt;\\\\d+)',\n        fillDate_PatternWithRest: '.*?' + fillDate_Pattern + '.*',\n        fillDate_IsMatch: Matches(fillDate_Argument, fillDate_PatternWithRest),\n        fillDate_DateParts:\n            if fillDate_IsMatch\n            then Tuple {\n                \"year\" : NormalizeYear(ToInteger(ReplaceMatches(fillDate_Argument, fillDate_PatternWithRest, '${year}'))),\n                \"month\": ToInteger(ReplaceMatches(fillDate_Argument, fillDate_PatternWithRest, '${month}')),\n                \"day\"  : ToInteger(ReplaceMatches(fillDate_Argument, fillDate_PatternWithRest, '${day}'))\n            }\n            else null,\n        fillDate:\n            if fillDate_IsMatch\n            then DateTime(fillDate_DateParts.\"year\", fillDate_DateParts.\"month\", fillDate_DateParts.\"day\")\n            else null,\n        normSig_FillDate: ReplaceMatches(fillDate_Argument, fillDate_Pattern, ''),\n\n        normSig_Clean2: CleanedStr(normSig_FillDate),\n\n        // extract out use dates\n        useDates_Argument: normSig_Clean2,\n        useDates_Pattern: '(?:(?:for )?use dates|for use|dates) +(?&lt;startMonth&gt;\\\\d+)/(?&lt;startDay&gt;\\\\d+)(?:/(?&lt;startYear&gt;\\\\d+))? *- *(?&lt;endMonth&gt;\\\\d+)/(?&lt;endDay&gt;\\\\d+)/(?&lt;endYear&gt;\\\\d+)',\n        useDates_PatternWithRest: '.*?' + useDates_Pattern + '.*',\n        useDates_IsMatch: Matches(useDates_Argument, useDates_PatternWithRest),\n        useDates_EndDateParts:\n            if useDates_IsMatch\n            then Tuple {\n                \"year\" : NormalizeYear(ToInteger(ReplaceMatches(useDates_Argument, useDates_PatternWithRest, '${endYear}'))),\n                \"month\": ToInteger(ReplaceMatches(useDates_Argument, useDates_PatternWithRest, '${endMonth}')),\n                \"day\"  : ToInteger(ReplaceMatches(useDates_Argument, useDates_PatternWithRest, '${endDay}'))\n            }\n            else null,\n        useDates_MaybeStartYear: ReplaceMatches(useDates_Argument, useDates_PatternWithRest, '${startYear}'),\n        useDates_StartDateParts:\n            if useDates_IsMatch\n            then Tuple {\n                \"year\" :\n                    if useDates_MaybeStartYear = ''\n                    then useDates_EndDateParts.\"year\"\n                    else NormalizeYear(ToInteger(useDates_MaybeStartYear)),\n                \"month\": ToInteger(ReplaceMatches(useDates_Argument, useDates_PatternWithRest, '${startMonth}')),\n                \"day\"  : ToInteger(ReplaceMatches(useDates_Argument, useDates_PatternWithRest, '${startDay}'))\n            }\n            else null,\n        endDate:\n            if useDates_IsMatch\n            then DateTime(useDates_EndDateParts.\"year\", useDates_EndDateParts.\"month\", useDates_EndDateParts.\"day\")\n            else null,\n        useDates_StartDateNonAdjusted:\n            if useDates_IsMatch\n            then DateTime(useDates_StartDateParts.\"year\", useDates_StartDateParts.\"month\", useDates_StartDateParts.\"day\")\n            else null,\n        startDate:\n            if useDates_IsMatch\n            then\n                if useDates_StartDateNonAdjusted after endDate\n                then useDates_StartDateNonAdjusted - 1 year // Note: Original Java logic did this even when MaybeStartYear nonempty\n                else useDates_StartDateNonAdjusted\n            else null,\n        normSig_UseDates: ReplaceMatches(useDates_Argument, useDates_Pattern, ''),\n\n        normSig_Clean3: CleanedStr(normSig_UseDates),\n\n        //---------------------------\n        // normalize different ways to say the same thing\n        //---------------------------\n\n        normSig_Take: ReplaceMatchesAlphaWord(normSig_Clean3, 'takes', 'take'),\n\n        //---------------------------\n        // shorthands\n        //---------------------------\n\n        // q\n        normSig_Q: ReplaceMatchesAlphaWord(normSig_Take, 'eve(?:ry|r|y)', 'q'),\n\n        //---------------------------\n        // dose units\n        //---------------------------\n\n        // tab\n        normSig_Tab: ReplaceMatchesAlphaWord(normSig_Q, '(?:tab(?:let)?s?|full tab)', 'tab'),\n\n        // pill\n        normSig_Pill: ReplaceMatchesAlphaWord(normSig_Tab, 'pills', 'pill'),\n\n        // capsule\n        normSig_Capsule: ReplaceMatchesAlphaWord(normSig_Pill, 'capsules', 'capsule'),\n\n        // puff\n        normSig_Puff: ReplaceMatchesAlphaWord(normSig_Capsule, 'puffs', 'puff'),\n\n        // tsp\n        normSig_Tsp: ReplaceMatchesAlphaWord(normSig_Puff, '(?:teaspoon(?:full?)?s?|tsps|tspfull?)', 'tsp'),\n\n        // patch\n        normSig_Patch: ReplaceMatchesAlphaWord(normSig_Tsp, 'patches', 'patch'),\n        normSig_OnePatch: ReplaceMatchesAlphaWord(normSig_Patch, 'apply patch', 'apply 1 patch'), // special case\n\n        // film\n        normSig_Film: ReplaceMatchesAlphaWord(normSig_OnePatch, 'films', 'film'),\n\n        // mg, mcg, ml, cc\n        normSig_Measures: ReplaceMatchesAlphaWord(normSig_Film, '(mg|mcg|ml|cc)s', '$1'),\n\n        //---------------------------\n        // time units\n        //---------------------------\n\n        // hr\n        normSig_Hr: ReplaceMatchesAlphaWord(normSig_Measures, 'h(?:ou)?rs?', 'hr'),\n\n        // day\n        normSig_Day: ReplaceMatchesAlphaWord(normSig_Hr, 'days', 'day'),\n\n        // week\n        normSig_Week: ReplaceMatchesAlphaWord(normSig_Day, 'w(?:ee)?ks?', 'week'),\n\n        // month\n        normSig_Month: ReplaceMatchesAlphaWord(normSig_Week, 'mo(?:nth)?s?', 'month'),\n\n        //---------------------------\n        // sig phrases\n        //---------------------------\n\n        // prn\n        normSig_Prn1: ReplaceMatchesAlphaWord(normSig_Month, '(?:only )?(?:as|if) (?:need(?:ed)?|necessary)', 'prn'),\n        normSig_Prn2: ReplaceMatchesAlphaWord(normSig_Prn1, 'prn prn', 'prn'),\n\n        //---------------------------\n        // routes\n        //---------------------------\n\n        // PO\n        normSig_PO: ReplaceMatchesAlphaWord(normSig_Prn2, '(?:by mouths?|orally|po po)', 'po'),\n\n        // sublinqual\n        normSig_SL: ReplaceMatchesAlphaWord(normSig_PO, '(?:sublingual|under tongue)', 'sl'),\n\n        // feeding tube\n        normSig_Tube: ReplaceMatchesAlphaWord(normSig_SL, 'per feeding tube', 'feeding tube'),\n\n        // skin\n        normSig_Skin1: ReplaceMatchesAlphaWord(normSig_Tube, '(?:externally )?to skin', 'skin'),\n        normSig_Skin2: ReplaceMatchesAlphaWord(normSig_Skin1, '(?:and change|to be applied)', ''),\n\n        // every day\n        normSig_EveryDay: ReplaceMatchesAlphaWord(normSig_Skin2, '(?:daily|(?:a|per) day|q ?day|qd)', 'every day'),\n\n        // every afternoon\n        normSig_EveryAft: ReplaceMatchesAlphaWord(normSig_EveryDay, 'in afternoon', 'every afternoon'),\n\n        // every night/evening/bedtime\n        normSig_EveryNight1: ReplaceMatchesAlphaWord(normSig_EveryAft, '(?:q ?|in )(evening|hs|night|pm)', 'every night'),\n        normSig_EveryNight2: ReplaceMatchesAlphaWord(normSig_EveryNight1, '(?:hs|(?&lt;!\\\\d)pm|nightly)', 'every night'),\n        normSig_EveryNight3: ReplaceMatchesAlphaWord(normSig_EveryNight2, '(?:at|before|every) (bed|night)( ?time)?', 'every night'),\n        normSig_EveryNight4: ReplaceMatchesAlphaWord(normSig_EveryNight3, 'every (?:night|day) every night', 'every night'),\n\n        // every morning\n        normSig_EveryMorn1: ReplaceMatchesAlphaWord(normSig_EveryNight4, '(?:(?:q ?|in )(?:morning|am)|(?&lt;!\\\\d)am)', 'every morning'),\n        normSig_EveryMorn2: ReplaceMatchesAlphaWord(normSig_EveryMorn1, 'every (?:day every morning|morning every day)', 'every morning'),\n\n        // combos\n        normSig_Combo3: ReplaceMatchesAlphaWord(normSig_EveryMorn2, 'every morning and every night', '2x'),\n\n        normSig_Clean4: CleanedStr(normSig_Combo3),\n\n        // remove a, an\n        normSig_A: ReplaceMatchesAlphaWord(normSig_Clean4, 'a', ''),\n        normSig_An: ReplaceMatchesAlphaWord(normSig_A, 'an', ''),\n\n        // excess hyphen in some sigs\n        normSig_ExcessHyphen: ReplaceMatches(normSig_An, '(\\\\d+ ?)-( ?\\\\D)', '$1$2'),\n        normSig_MergeSpaces: ReplaceMatches(normSig_ExcessHyphen, ' {2,}', ' '),\n\n        // Trim bounding whitespace.\n        normSig_TrimSpaces1: ReplaceMatches(normSig_MergeSpaces, '^ *(.*?) *$', '$1'),\n        normSig_TrimSpaces2: ReplaceMatches(normSig_TrimSpaces1, '\\\\( *(.*?) *\\\\)', '($1)'),\n\n        normSig: normSig_TrimSpaces2,\n\n        //----------------------------\n        //----------------------------\n        // extract out known elements\n        //----------------------------\n        //----------------------------\n\n        leftoverSig_Argument: normSig,\n\n        // ignorable phrases\n        ignorSig_Argument: Tuple { ignorable: null as String, leftover: leftoverSig_Argument },\n        ignorSig_11: ProcessIgnorableWordPhrase(ignorSig_Argument, 'do not combine other tylenol products'),\n        ignorSig_12: ProcessIgnorableWordPhrase(ignorSig_11, 'can take stool softener if constipation occurs'),\n        ignorSig_13: ProcessIgnorableWordPhrase(ignorSig_12, 'may cause drowsiness'),\n        ignorSig_14: ProcessIgnorableWordPhrase(ignorSig_13, '(?:as it )?(?:may sedate|is sedating)'),\n        ignorSig_15: ProcessIgnorableWordPhrase(ignorSig_14, 'may fill early for travel'),\n        ignorSig_21: ProcessIgnorableWordPhrase(ignorSig_15, 'do not drive on medication'),\n        ignorSig_22: ProcessIgnorableWordPhrase(ignorSig_21, 'must be seen for further refills'),\n        ignorSig_23: ProcessIgnorableWordPhrase(ignorSig_22, 'may (?:re)?fil.+?(?:(?:before|prior to) use dates?|day prior|fill date|same day|today)'),\n        ignorSig_24: ProcessIgnorableWordPhrase(ignorSig_23, 'not valid without seal'),\n        ignorSig_25: ProcessIgnorableWordPhrase(ignorSig_24, 'bring to appointment'),\n        ignorSig_31: ProcessIgnorableWordPhrase(ignorSig_25, 'needs.+?brand'),\n        ignorSig_32: ProcessIgnorableWordPhrase(ignorSig_31, 'this is(?: a)?'),\n        ignorSig_33: ProcessIgnorableWordPhrase(ignorSig_32, 'no early refills'),\n        ignorSig_34: ProcessIgnorableWordPhrase(ignorSig_33, 'do not fill early'),\n        ignorSig_35: ProcessIgnorableWordPhrase(ignorSig_34, 'attending to sign'),\n        ignorSig_41: ProcessIgnorableWordPhrase(ignorSig_35, 'no further refills from pmc'),\n        ignorSig_42: ProcessIgnorableWordPhrase(ignorSig_41, '(?:use )?as directed'),\n        ignorSig_43: ProcessIgnorableWordPhrase(ignorSig_42, 'wean asap'),\n        ignorSig_44: ProcessIgnorableWordPhrase(ignorSig_43, '(?:and )?change'),\n        ignorSig_51: ProcessIgnorableWordPhrase(ignorSig_44, 'avoid with driving or work'),\n        ignorSig_52: ProcessIgnorableWordPhrase(ignorSig_51, 'try to minimize overall'),\n        ignorSig_53: ProcessIgnorableWordPhrase(ignorSig_52, 'but'),\n        ignorSig_54: ProcessIgnorableWordPhrase(ignorSig_53, 'self pay(?: portion)?'),\n        ignorSig_55: ProcessIgnorableWordPhrase(ignorSig_54, 'insurance portion'),\n        ignorSig_61: ProcessIgnorableWordPhrase(ignorSig_55, 'instructions in spanish'),\n        ignorSig_62: ProcessIgnorableWordPhrase(ignorSig_61, 'do not combine'),\n        ignorSig_63: ProcessIgnorableWordPhrase(ignorSig_62, 'day time'),\n        ignorSig_64: ProcessIgnorableWordPhrase(ignorSig_63, 'daw'),\n        ignorSig_65: ProcessIgnorableWordPhrase(ignorSig_64, 'alternate.+?(?:oxy|hydro)codone'),\n        ignorSig_71: ProcessIgnorableWordPhrase(ignorSig_65, 'brand.+?(?:necessary|only)'),\n        ignorSig_72: ProcessIgnorableWordPhrase(ignorSig_71, 'do not.+?(?:sedate|on med(?:ication)?)'),\n        ignorSig_73: ProcessIgnorableWordPhrase(ignorSig_72, 'prior.+?skin care'),\n        ignorSig_74: ProcessIgnorableWordPhrase(ignorSig_73, '(?:do not exceed|max).+?acetaminophen.+?(?:24 ?hr|day)'),\n        ignorSig_75: ProcessIgnorableWordPhrase(ignorSig_74, 'dr.+?to sign only'),\n        ignorSig_81: ProcessIgnorableWordPhrase(ignorSig_75, 'please notify.+?ready'),\n        ignorSig_82: ProcessIgnorableWordPhrase(ignorSig_81, '(?:hydro|r?oxy)codone'),\n        ignorSig: ignorSig_82.ignorable,\n        leftoverSig_SansIgnorables: ignorSig_82.leftover,\n\n        // commands: take, apply (starts with)\n        command_Argument: leftoverSig_SansIgnorables,\n        command_Pattern: '^((?:to )?(?:apply|dissolve|place|take)|may take|take up to)(?![a-z])',\n        command:\n            if Matches(command_Argument, command_Pattern + '.*')\n            then ReplaceMatches(command_Argument, '(' + command_Pattern + ').*', '$1')\n            else null,\n        leftoverSig_Command: ReplaceMatches(command_Argument, command_Pattern, ''),\n\n        // prn\n        isPrn_Argument: Tuple { isPrn: false, indication: indication_EarlyStageCheck, leftover: leftoverSig_Command },\n        isPrn_1: ProcessWordPrnReasonWithLabel(isPrn_Argument, '.*?pain(?: control)?', 'pain'),\n        isPrn_2: ProcessWordPrnReason(isPrn_1, 'cough and congestion'),\n        isPrn_3: ProcessWordPrnReason(isPrn_2, 'headaches?'),\n        isPrn_4: ProcessWordPrnReason(isPrn_3, 'nausea and stomach cramps'),\n        isPrn_5: ProcessWordPrnReasonWithLabel(isPrn_4, '.*?cough', 'cough'),\n        isPrn_6: ProcessWordPrnReason(isPrn_5, '(?:restless leg(?: syndrome|s)|rls)'),\n        isPrn_7: ProcessWordPrnReason(isPrn_6, 'opioid dependence'),\n        isPrn_MainChecks: isPrn_7.isPrn,\n\n        // indication not part of prn\n        indication_Argument: Tuple { indication: isPrn_7.indication, leftover: isPrn_7.leftover },\n        indication_1: ProcessWordIndicationWithLabel(indication_Argument, '.*?pain(?: control)?', 'pain'),\n        indication_2: ProcessWordIndication(indication_1, 'cough(?: and congestion)?'),\n        indication_3: ProcessWordIndication(indication_2, 'headaches?'),\n        indication_4: ProcessWordIndication(indication_3, 'nausea and stomach cramps'),\n        indication_5: ProcessWordIndication(indication_4, '(?:restless leg(?: syndrome|s)|rls)'),\n        indication_6: ProcessWordIndication(indication_5, 'opioid dependence'),\n        indication: indication_6.indication,\n\n        // duration\n        duration_Argument: Tuple {\n            \"duration\": null as Integer,\n            durationTimeUnits: null as String,\n            leftover: indication_6.leftover,\n            durationAlreadyParsed: false\n        },\n        duration_11: ProcessWordDuration(duration_Argument, 'for', 'day(?: (?:supply|rx))?', 'd'),\n        duration_12: ProcessWordDuration(duration_11, 'for', 'week(?: (?:supply|rx))?', 'wk'),\n        duration_13: ProcessWordDuration(duration_12, 'for', 'month(?: (?:supply|rx))?', 'mo'),\n        duration_21: ProcessWordDuration(duration_13, 'each rx should last for', 'day', 'd'),\n        duration_22: ProcessWordDuration(duration_21, 'each rx should last for', 'week', 'wk'),\n        duration_23: ProcessWordDuration(duration_22, 'each rx should last for', 'month', 'mo'),\n        duration_31: ProcessWordDuration(duration_23, 'must last at least(?: to last)?', 'day', 'd'),\n        duration_32: ProcessWordDuration(duration_31, 'must last at least(?: to last)?', 'week', 'wk'),\n        duration_33: ProcessWordDuration(duration_32, 'must last at least(?: to last)?', 'month', 'mo'),\n        duration_41: ProcessWordDuration(duration_33, 'each fill must last', 'day', 'd'),\n        duration_42: ProcessWordDuration(duration_41, 'each fill must last', 'week', 'wk'),\n        duration_43: ProcessWordDuration(duration_42, 'each fill must last', 'month', 'mo'),\n        duration_51: ProcessWordDuration(duration_43, 'must last?', 'day', 'd'),\n        duration_52: ProcessWordDuration(duration_51, 'must last?', 'week', 'wk'),\n        duration_53: ProcessWordDuration(duration_52, 'must last?', 'month', 'mo'),\n        duration_61: ProcessWordDuration(duration_53, 'to last(?: at least)?', 'day', 'd'),\n        duration_62: ProcessWordDuration(duration_61, 'to last(?: at least)?', 'week', 'wk'),\n        duration_63: ProcessWordDuration(duration_62, 'to last(?: at least)?', 'month', 'mo'),\n        duration_71: ProcessWordDuration(duration_63, '', 'day (?:supply|rx)', 'd'),\n        duration_72: ProcessWordDuration(duration_71, '', 'week (?:supply|rx)', 'wk'),\n        duration_73: ProcessWordDuration(duration_72, '', 'month (?:supply|rx)', 'mo'),\n        duration_81: ProcessWordDuration(duration_73, 'x', 'day', 'd'),\n        duration_82: ProcessWordDuration(duration_81, 'x', 'week', 'wk'),\n        duration_83: ProcessWordDuration(duration_82, 'x', 'month', 'mo'),\n        \"duration\": duration_83.\"duration\",\n        durationTimeUnits: duration_83.durationTimeUnits,\n\n        // daily max\n        dailyMax_Argument: Tuple {\n            maxDailyFrequency: null as Integer,\n            maxDailyDose: null as Decimal,\n            maxDailyDoseUnits: null as String,\n            leftover: duration_83.leftover\n        },\n        dailyMax_commonSuffixRegex: '(?:(?:in )?every day|/?day|(?:in )?24 ?hr|per 24hr day)',\n        dailyMax_1: ProcessWordDailyMax(dailyMax_Argument, '(?:(?:for|up ?to) )?(?:max(?:imum)?|ave(?:rage)?|avg)', dailyMax_commonSuffixRegex),\n        dailyMax_2: ProcessWordDailyMax(dailyMax_1, '(?:do not|not to|to) exceed', dailyMax_commonSuffixRegex),\n        dailyMax_3: ProcessWordDailyMax(dailyMax_2, 'total', dailyMax_commonSuffixRegex),\n        dailyMax_4: ProcessWordDailyMax(dailyMax_3, '(?:(?:limit|for) )?up ?to', dailyMax_commonSuffixRegex),\n        dailyMax_5: ProcessWordDailyMax(dailyMax_4, 'for', '(?:every day|/day|(?:in )?24 ?hr|per 24hr day)'),\n        dailyMax_6: ProcessWordDailyMax(dailyMax_5, '\\\\(', 'every day\\\\)'),\n        dailyMax_7: ProcessWordDailyMax(dailyMax_6, 'or', 'every day'),\n        maxDailyFrequency: dailyMax_7.maxDailyFrequency,\n        maxDailyDose: dailyMax_7.maxDailyDose,\n        maxDailyDoseUnits: dailyMax_7.maxDailyDoseUnits,\n\n        // process route\n        route_Argument: CleanedStr(dailyMax_7.leftover),\n        // TODO: What to choose when for example \"po or sl\" is in the SIG?\n        route:\n            if Matches(route_Argument, '.*?(?&lt;![a-z])(?:po|sl|skin|feeding tube)(?![a-z]).*')\n            then ReplaceMatches(route_Argument, '.*?(?&lt;![a-z])(po|sl|skin|feeding tube)(?![a-z]).*', '$1')\n            else null,\n        leftoverSig_Route: ReplaceMatchesAlphaWord(route_Argument, '(?:po|sl|skin|feeding tube)', ''),\n\n        // process dosing\n        dosing_Argument: CleanedStr(leftoverSig_Route),\n        // assume dose starts at beginning at this point\n        // TODO: What to do when dose is expressed as a sum of multiple units, eg \"1 30mg tab and 1 60mg tab\"?\n        dosing_Pattern: '^'\n            + '(?&lt;doseLow&gt;\\\\d+\\\\.?\\\\d*)(?:-(?&lt;doseHigh&gt;\\\\d+\\\\.?\\\\d*))? ?(?&lt;doseUnits&gt;' + DoseUnitsOpts + ')?'\n            + ' ?(?:\\\\((?&lt;altDoseSig&gt;'\n            + '.*' // should be '.*?' instead?\n            + ')\\\\))?',\n        dosing_PatternWithRest: dosing_Pattern + '.*',\n        dosing_IsMatch: Matches(dosing_Argument, dosing_PatternWithRest),\n        doseLow: if dosing_IsMatch then ToDecimal(ReplaceMatches(dosing_Argument, dosing_PatternWithRest, '${doseLow}')) else null,\n        doseHighStr: if dosing_IsMatch then ReplaceMatches(dosing_Argument, dosing_PatternWithRest, '${doseHigh}') else '',\n        doseHigh: if doseHighStr = '' then doseLow else ToDecimal(doseHighStr),\n        doseUnits: if dosing_IsMatch then NullIfEmptyString(ReplaceMatches(dosing_Argument, dosing_PatternWithRest, '${doseUnits}')) else null,\n        altDoseSig: if dosing_IsMatch then ReplaceMatches(dosing_Argument, dosing_PatternWithRest, '${altDoseSig}') else '',\n        altDosing_Pattern: '(?&lt;altDoseLow&gt;\\\\d+\\\\.?\\\\d*)(?:-(?&lt;altDoseHigh&gt;\\\\d+\\\\.?\\\\d*))? ?(?&lt;altDoseUnits&gt;' + DoseUnitsOpts + ')?',\n        altDosing_PatternWithRest: altDosing_Pattern + '.*',\n        altDosing_IsMatch: Matches(altDoseSig, altDosing_PatternWithRest),\n        altDoseLow: if altDosing_IsMatch then ToDecimal(ReplaceMatches(altDoseSig, altDosing_PatternWithRest, '${altDoseLow}')) else null,\n        altDoseHighStr: if altDosing_IsMatch then ReplaceMatches(altDoseSig, altDosing_PatternWithRest, '${altDoseHigh}') else '',\n        altDoseHigh: if altDoseHighStr = '' then altDoseLow else ToDecimal(altDoseHighStr),\n        altDoseUnits: if altDosing_IsMatch then NullIfEmptyString(ReplaceMatches(altDoseSig, altDosing_PatternWithRest, '${altDoseUnits}')) else null,\n        leftoverSig_Dosing: ReplaceMatches(dosing_Argument, dosing_Pattern, ''),\n\n        // process interval\n        interval_Argument: CleanedStr(leftoverSig_Dosing),\n        // q_X-Y_h(r) pattern\n        interval_Pattern: '\\\\bq ?(?&lt;intervalLow&gt;\\\\d+)(?:-(?&lt;intervalHigh&gt;\\\\d+))? ?(?&lt;intervalTimeUnits&gt;hr?|month|week|day|prn)?\\\\b',\n        interval_PatternWithRest: '.*?' + interval_Pattern + '.*',\n        interval_IsMatch: Matches(interval_Argument, interval_PatternWithRest),\n        intervalLow: if interval_IsMatch then ToInteger(ReplaceMatches(interval_Argument, interval_PatternWithRest, '${intervalLow}')) else null,\n        intervalHighStr: if interval_IsMatch then ReplaceMatches(interval_Argument, interval_PatternWithRest, '${intervalHigh}') else '',\n        intervalHigh: if intervalHighStr = '' then intervalLow else ToInteger(intervalHighStr),\n        intervalTimeUnitsStr: if interval_IsMatch then ReplaceMatches(interval_Argument, interval_PatternWithRest, '${intervalTimeUnits}') else '',\n        intervalTimeUnits:\n            if interval_IsMatch\n            then\n                if intervalTimeUnitsStr in List {'', 'h', 'hr', 'prn'}\n                then 'h'\n                else if intervalTimeUnitsStr = 'day'\n                then 'd'\n                else intervalTimeUnitsStr\n            else null,\n        isPrn_Interval: isPrn_MainChecks or intervalTimeUnitsStr = 'prn',\n        leftoverSig_Interval: ReplaceMatches(interval_Argument, interval_Pattern, ''),\n\n        // process frequency\n        frequency_Argument: CleanedStr(leftoverSig_Interval),\n        frequency_Pattern: '^(?:prn)? ?(?&lt;frequencyRange&gt;(?&lt;frequencyLow&gt;\\\\d+)x?(?:-(?&lt;frequencyHigh&gt;\\\\d+))?x)? ?(?:(?&lt;frequencyTimeUnits&gt;every (?:day|night|morning)|prn)|$)',\n        frequency_PatternWithRest: frequency_Pattern + '.*',\n        frequency_IsMatch: Matches(frequency_Argument, frequency_PatternWithRest),\n        frequency_Range: if frequency_IsMatch then ReplaceMatches(frequency_Argument, frequency_PatternWithRest, '${frequencyRange}') else '',\n        frequencyLowStr: if frequency_IsMatch then ReplaceMatches(frequency_Argument, frequency_PatternWithRest, '${frequencyLow}') else '',\n        frequencyHighStr: if frequency_IsMatch then ReplaceMatches(frequency_Argument, frequency_PatternWithRest, '${frequencyHigh}') else '',\n        frequencyTimeUnitsStr: if frequency_IsMatch then ReplaceMatches(frequency_Argument, frequency_PatternWithRest, '${frequencyTimeUnits}') else '',\n        frequency_HaveResult: frequency_IsMatch and (frequency_Range != '' or StartsWith(frequencyTimeUnitsStr, 'every')),\n        frequencyLow: if frequency_HaveResult then if frequencyLowStr = '' then 1 else ToInteger(frequencyLowStr) else null,\n        frequencyHigh: if frequency_HaveResult then if frequencyHighStr = '' then frequencyLow else ToInteger(frequencyHighStr) else null,\n        frequencyTimeUnits: if frequency_HaveResult then 'd' else null,\n        isPrn_Frequency: isPrn_Interval or (frequency_HaveResult and frequencyTimeUnitsStr = 'prn'),\n        leftoverSig_Frequency: if frequency_HaveResult then ReplaceMatches(frequency_Argument, frequency_Pattern, '') else frequency_Argument,\n\n        // cleanup\n        cleanup_Argument: CleanedStr(leftoverSig_Frequency),\n        isPrn_Cleanup: isPrn_Frequency or Matches(cleanup_Argument, '.*? *(?&lt;![a-z])prn'),\n        leftoverSig_Cleanup: ReplaceMatches(cleanup_Argument, ' *(?&lt;![a-z])prn$', ''),\n        isPrn: isPrn_Cleanup or leftoverSig_Cleanup = 'prn (',\n        leftoverSig: if Matches(leftoverSig_Cleanup, '(?:prn \\\\(|\\\\(|\\\\))') then '' else leftoverSig_Cleanup\n\n    return Tuple {\n         alternateDoseHigh: altDoseHigh,\n         alternateDoseLow: altDoseLow,\n         alternateDoseUnits: altDoseUnits,\n         command: command,\n         doseHigh: doseHigh,\n         doseLow: doseLow,\n         doseUnits: doseUnits,\n         \"duration\": \"duration\",\n         durationTimeUnits: durationTimeUnits,\n         earliestFillDate: fillDate,\n         endDate: endDate,\n         frequencyHigh: frequencyHigh,\n         frequencyLow: frequencyLow,\n         frequencyTimeUnits: frequencyTimeUnits,\n         ignorableSig: ignorSig,\n         indication: indication,\n         intervalHigh: intervalHigh,\n         intervalLow: intervalLow,\n         intervalTimeUnits: intervalTimeUnits,\n         isPrn: isPrn,\n         leftoverSig: leftoverSig,\n         maxDailyDose: maxDailyDose,\n         maxDailyDoseUnits: maxDailyDoseUnits,\n         maxDailyFrequency: maxDailyFrequency,\n         normalizedSig: normSig,\n         originalSig: origSig,\n         route: route,\n         startDate: startDate\n    }\n\n/*************************************************************************/\n\ndefine private function ProcessIgnorableWordPhrase(\n        states List&lt;Tuple {ignorable String, leftover String}&gt;, phrase String)\n        returns Tuple {ignorable String, leftover String}:\n    SingletonFrom(\n    states S\n    return\n        if Matches(S.leftover, '.*?\\\\b' + phrase + '\\\\b.*')\n        then Tuple {\n            ignorable: (if S.ignorable is null then '' else S.ignorable + '; ')\n                + ReplaceMatches(S.leftover, '.*?\\\\b(' + phrase + ')\\\\b.*', '$1'),\n            leftover: ReplaceMatchesAlphaDigitWord(S.leftover, phrase, '')\n        }\n        else S\n    )\n\n/*************************************************************************/\n\ndefine private function ProcessWordPrnReason(\n        states List&lt;Tuple {isPrn Boolean, indication String, leftover String}&gt;, reasonRegex String)\n        returns Tuple {isPrn Boolean, indication String, leftover String}:\n    ProcessWordPrnReasonWithLabel(states, reasonRegex, null as String)\n\ndefine private function ProcessWordPrnReasonWithLabel(\n        states List&lt;Tuple {isPrn Boolean, indication String, leftover String}&gt;,\n        reasonRegex String, reasonLabel List&lt;String&gt;)\n        returns Tuple {isPrn Boolean, indication String, leftover String}:\n    SingletonFrom(\n    states S\n    return\n        if Matches(S.leftover, '.*?\\\\bprn(?: for)? ' + reasonRegex + '\\\\b.*')\n        then Tuple {\n            isPrn: true,\n            indication:\n                if SingletonFrom(reasonLabel) is null\n                then ReplaceMatches(S.leftover, '.*?\\\\bprn(?: for)? (' + reasonRegex + ')\\\\b.*', '$1')\n                else SingletonFrom(reasonLabel),\n            leftover: ReplaceMatchesAlphaDigitWord(S.leftover, 'prn(?: for)? ' + reasonRegex, '')\n        }\n        else S\n    )\n\ndefine private function ProcessWordIndication(\n        states List&lt;Tuple {indication String, leftover String}&gt;, indicRegex String)\n        returns Tuple {indication String, leftover String}:\n    ProcessWordIndicationWithLabel(states, indicRegex, null as String)\n\ndefine private function ProcessWordIndicationWithLabel(\n        states List&lt;Tuple {indication String, leftover String}&gt;,\n        indicRegex String, indicLabel List&lt;String&gt;)\n        returns Tuple {indication String, leftover String}:\n    SingletonFrom(\n    states S\n    return\n        if Matches(S.leftover, '.*?\\\\b(?:for|indications?) ' + indicRegex + '\\\\b.*')\n        then Tuple {\n            indication:\n                if SingletonFrom(indicLabel) is null\n                then ReplaceMatches(S.leftover, '.*?\\\\b(?:for|indications?) (' + indicRegex + ')\\\\b.*', '$1')\n                else SingletonFrom(indicLabel),\n            leftover: ReplaceMatchesAlphaDigitWord(S.leftover, '(?:for|indications?) ' + indicRegex, '')\n        }\n        else S\n    )\n\n/*************************************************************************/\n\ndefine private function ProcessWordDuration(\n        states List&lt;Tuple {\"duration\" Integer, durationTimeUnits String, leftover String, durationAlreadyParsed Boolean}&gt;,\n        prefixRegex String, suffixRegex String, unitsLabel String)\n        returns Tuple {\"duration\" Integer, durationTimeUnits String, leftover String, durationAlreadyParsed Boolean}:\n    SingletonFrom(\n    states S\n    return\n        if Matches(S.leftover, '.*?\\\\b' + prefixRegex + ' *\\\\d+ *' + suffixRegex + '\\\\b.*')\n        then\n            if S.durationAlreadyParsed\n                or Matches(S.leftover, '.*?\\\\b' + prefixRegex + ' *\\\\d+ *' + suffixRegex\n                    + '\\\\b.*?\\\\b' + prefixRegex + ' *\\\\d+ *' + suffixRegex + '\\\\b.*')\n            // avoid processing cases where there are multiple patterns, e.g., take 1 tab for x days, 1/5 tab for y days\n            then Tuple {\n                \"duration\": null as Integer,\n                durationTimeUnits: null as String,\n                leftover: ReplaceMatchesAlphaDigitWord(S.leftover, prefixRegex + ' *\\\\d+ *' + suffixRegex, ''),\n                durationAlreadyParsed: true\n            }\n            else Tuple {\n                \"duration\": ToInteger(ReplaceMatches(S.leftover, '.*?\\\\b' + prefixRegex + ' *(\\\\d+) *' + suffixRegex + '\\\\b.*', '$1')),\n                durationTimeUnits: unitsLabel,\n                leftover: ReplaceMatchesAlphaDigitWord(S.leftover, prefixRegex + ' *\\\\d+ *' + suffixRegex, ''),\n                durationAlreadyParsed: true\n            }\n        else S\n    )\n\n/*************************************************************************/\n\ndefine private function ProcessWordDailyMax(\n        states List&lt;Tuple {maxDailyFrequency Integer, maxDailyDose Decimal, maxDailyDoseUnits String, leftover String}&gt;,\n        prefixRegex String, suffixRegex String)\n        returns Tuple {maxDailyFrequency Integer, maxDailyDose Decimal, maxDailyDoseUnits String, leftover String}:\n    SingletonFrom(\n    states S\n    return\n        if Matches(S.leftover, '.*?(?&lt;!\\w)' + prefixRegex + ' ?\\\\d+ ?x ?' + suffixRegex + '(?!\\w).*')\n        then Tuple {\n            maxDailyFrequency: ToInteger(ReplaceMatches(S.leftover, '.*?(?&lt;!\\w)' + prefixRegex + ' ?(\\\\d+) ?x ?' + suffixRegex + '(?!\\w).*', '$1')),\n            maxDailyDose: S.maxDailyDose,\n            maxDailyDoseUnits: S.maxDailyDoseUnits,\n            leftover: ReplaceMatchesAlphaDigitWord(S.leftover, prefixRegex + ' ?\\\\d+ ?x ?' + suffixRegex, '')\n        }\n        else if Matches(S.leftover, '.*?(?&lt;!\\w)' + prefixRegex + ' ?\\\\d+\\\\.?\\\\d* ?(?:' + DoseUnitsOpts + ')? ?' + suffixRegex + '(?!\\w).*')\n        then Tuple {\n            maxDailyFrequency: S.maxDailyFrequency,\n            maxDailyDose: ToDecimal(ReplaceMatches(S.leftover, '.*?(?&lt;!\\w)' + prefixRegex + ' ?(\\\\d+\\\\.?\\\\d*) ?(?:' + DoseUnitsOpts + ')? ?' + suffixRegex + '(?!\\w).*', '$1')),\n            maxDailyDoseUnits: NullIfEmptyString(ReplaceMatches(S.leftover, '.*?(?&lt;!\\w)' + prefixRegex + ' ?\\\\d+\\\\.?\\\\d* ?(' + DoseUnitsOpts + ')? ?' + suffixRegex + '(?!\\w).*', '$1')),\n            leftover: ReplaceMatches(S.leftover, '(?&lt;!\\w)' + prefixRegex + ' ?\\\\d+\\\\.?\\\\d* ?(?:' + DoseUnitsOpts + ')? ?' + suffixRegex + '(?!\\w)', '')\n        }\n        else S\n    )\n\n/*************************************************************************/\n\n/**\n* Intended to be called iteratively after other processing.  Contains methods for cleaning issues with strings that may arise repetitively.\n* @param strUnchangedByFunction\n* @return\n*/\ndefine private function CleanedStr(value String) returns String:\n    value str\n    let\n\n        // convert all multi-space spaces to single space\n        mergeSpaces: ReplaceMatches(str, ' {2,}', ' '),\n\n        // remove all leading periods and spaces\n        dropPfxPeriods: ReplaceMatches(mergeSpaces, '^[\\\\. ]*', ''),\n\n        // remove periods following a non-number character\n        dropNonNumPeriods: ReplaceMatches(dropPfxPeriods, '(?&lt;=\\\\D)\\\\.', ' '),\n\n        // remove hyphens following a non-number character (unless it's a space or d, e.g., bid-tid)\n        // but first add a space if hyphen precedes an alpha char, so we don't end up catenating words foo-bar into foobar\n        dropNonNumHyphens1: ReplaceMatches(dropNonNumPeriods, '(?&lt;=[^\\\\d d])-(?=[a-z])', '- '),\n        dropNonNumHyphens2: ReplaceMatches(dropNonNumHyphens1, '(?&lt;=[^\\\\d d])-', ''),\n\n        // remove ending periods and hyphens and spaces\n        dropSfxPeriodsHyphens: ReplaceMatches(dropNonNumHyphens2, '[\\\\. -]*$', ''),\n\n        // remove paired parenthesis having no contents\n        dropEmptyParens: ReplaceMatches(dropSfxPeriodsHyphens, '\\\\( *\\\\)', '')\n\n    return dropEmptyParens\n\n/*************************************************************************/\n\n/* Replace whole words as defined by not having any adjacent letters; assume all arguments are lowercase. */\n/* Searching for [a-z] is more specific than \\b which also allows digits. */\ndefine private function ReplaceMatchesAlphaWord(phrase String, oldWordPattern String, newWordTemplate String) returns String:\n    ReplaceMatches(phrase, '(?&lt;![a-z])' + oldWordPattern + '(?![a-z])', newWordTemplate)\n\ndefine private function ReplaceMatchesDigitWord(phrase String, oldWordPattern String, newWordTemplate String) returns String:\n    ReplaceMatches(phrase, '(?&lt;!\\\\d)' + oldWordPattern + '(?!\\\\d)', newWordTemplate)\n\ndefine private function ReplaceMatchesAlphaDigitWord(phrase String, oldWordPattern String, newWordTemplate String) returns String:\n    ReplaceMatches(phrase, '\\\\b' + oldWordPattern + '\\\\b', newWordTemplate)\n\ndefine private function NullIfEmptyString(value String) returns String:\n    if value ~ '' then null else value\n\n/*************************************************************************/\n\n// The original Java version of this library used SimpleDateFormat.parse('MM/dd/yy')\n// and so we resemble its behavior by treating a year less than 100 as relative;\n// a year in 0-39 is treated as 20xx while 40-99 is treated as 19xx.\n// Technically the original did +20/-80 on the today or some such but we will be deterministic instead.\n// As of this writing it is early 2018 so the following is within a year of the today logic for now.\ndefine private function NormalizeYear(y Integer) returns Integer:\n         if y &gt;= 100 then y\n    else if y &gt;=  40 then 1900+y\n    else if y &gt;=   0 then 2000+y\n    else                  y\n\ndefine private DoseUnitsOpts: 'tab|pill|capsule|patch|film|mg|mcg|ml|cc|tsp'\n\n/*************************************************************************/\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "name": "RxSig",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://hl7.org/fhir/codesystem-library-type.html",
        "code": "logic-library"
      }
    ]
  },
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}